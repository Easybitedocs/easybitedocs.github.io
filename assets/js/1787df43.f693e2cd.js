"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[2361],{8099:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>t,contentTitle:()=>d,default:()=>o,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"syntax/variables","title":"Variables","description":"Variables in EasyBite are named containers used to store data. They can hold different data types such as strings, numbers, booleans, arrays, and more. Variables must be declared before use using the declare keyword.","source":"@site/docs/syntax/variables.md","sourceDirName":"syntax","slug":"/syntax/variables","permalink":"/syntax/variables","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/syntax/variables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Keywords","permalink":"/syntax/keywords"},"next":{"title":"Data Types and Operators","permalink":"/syntax/datatypes-operators"}}');var n=r(4848),l=r(8453);const i={},d="Variables",t={},c=[{value:"Declaring a Variable",id:"declaring-a-variable",level:2},{value:"Declaring Multiple Variables",id:"declaring-multiple-variables",level:2},{value:"Declaring Variables and Arrays Together",id:"declaring-variables-and-arrays-together",level:2},{value:"Assigning a Value",id:"assigning-a-value",level:2},{value:"Reassigning Values",id:"reassigning-values",level:2},{value:"Variable Naming Rules",id:"variable-naming-rules",level:2},{value:"Arrays",id:"arrays",level:2},{value:"Declaring an Array",id:"declaring-an-array",level:3},{value:"Assigning Array Values",id:"assigning-array-values",level:3},{value:"Accessing Array Elements",id:"accessing-array-elements",level:3},{value:"Updating Array Elements",id:"updating-array-elements",level:3},{value:"Null Values",id:"null-values",level:2},{value:"Dynamic Typing",id:"dynamic-typing",level:2},{value:"Summary Table",id:"summary-table",level:2}];function h(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"variables",children:"Variables"})}),"\n",(0,n.jsxs)(a.p,{children:["Variables in EasyBite are named containers used to store data. They can hold different data types such as strings, numbers, booleans, arrays, and more. Variables must be declared before use using the ",(0,n.jsx)(a.code,{children:"declare"})," keyword."]}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h2,{id:"declaring-a-variable",children:"Declaring a Variable"}),"\n",(0,n.jsxs)(a.p,{children:["To declare a variable in EasyBite, use the ",(0,n.jsx)(a.code,{children:"declare"})," keyword followed by the variable name:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:"declare username\n"})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h2,{id:"declaring-multiple-variables",children:"Declaring Multiple Variables"}),"\n",(0,n.jsx)(a.p,{children:"You can declare multiple variables in the same line, separated by commas:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:"declare username, password, loggedIn\n"})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h2,{id:"declaring-variables-and-arrays-together",children:"Declaring Variables and Arrays Together"}),"\n",(0,n.jsxs)(a.p,{children:["EasyBite allows declaring regular variables and arrays in the same ",(0,n.jsx)(a.code,{children:"declare"})," statement:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:"declare username, users[], scores[5]\n"})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h2,{id:"assigning-a-value",children:"Assigning a Value"}),"\n",(0,n.jsxs)(a.p,{children:["To assign a value to a variable, you can use the ",(0,n.jsx)(a.code,{children:"set"})," keyword:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:'set username to "admin"\n'})}),"\n",(0,n.jsxs)(a.p,{children:["Alternatively, EasyBite also supports direct assignment without the ",(0,n.jsx)(a.code,{children:"set"})," keyword:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:'username to "admin"\n'})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h2,{id:"reassigning-values",children:"Reassigning Values"}),"\n",(0,n.jsxs)(a.p,{children:["Once declared, you can reassign a value to a variable directly, even without the ",(0,n.jsx)(a.code,{children:"set"})," keyword:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:"declare score\r\nset score to 10\r\n\r\nscore to 20\n"})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h2,{id:"variable-naming-rules",children:"Variable Naming Rules"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"A variable name must start with a letter."}),"\n",(0,n.jsx)(a.li,{children:"It can include letters, digits, and underscores."}),"\n",(0,n.jsx)(a.li,{children:"It must not be a keyword or reserved word."}),"\n",(0,n.jsx)(a.li,{children:"Variable names are case-insensitive."}),"\n"]}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h2,{id:"arrays",children:"Arrays"}),"\n",(0,n.jsx)(a.p,{children:"EasyBite supports arrays (fixed and dynamic length) for storing lists of values."}),"\n",(0,n.jsx)(a.h3,{id:"declaring-an-array",children:"Declaring an Array"}),"\n",(0,n.jsx)(a.p,{children:"To declare an array variable, specify the size or leave it empty for a dynamic array:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:"declare numbers[10]      // Fixed length of 10\r\ndeclare names[]          // Dynamic length\n"})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h3,{id:"assigning-array-values",children:"Assigning Array Values"}),"\n",(0,n.jsx)(a.p,{children:"You can assign values to arrays using square brackets:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:'numbers to [1, 2, 3, 4, 5]\r\nnames to ["Ali", "Zara", "Umar"]\n'})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h3,{id:"accessing-array-elements",children:"Accessing Array Elements"}),"\n",(0,n.jsx)(a.p,{children:"Array indices start at 0:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:"show(names[0])   // Outputs: Ali\n"})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h3,{id:"updating-array-elements",children:"Updating Array Elements"}),"\n",(0,n.jsx)(a.p,{children:"You can update specific elements by their index:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:'names[1] to "Fatima"\n'})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h2,{id:"null-values",children:"Null Values"}),"\n",(0,n.jsxs)(a.p,{children:["If a variable is declared but not assigned, it holds the value ",(0,n.jsx)(a.code,{children:"null"}),":"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:"declare temp\r\nshow(temp)   // Output: null\r\n\r\ntemp to null  // Explicitly assigning null\n"})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h2,{id:"dynamic-typing",children:"Dynamic Typing"}),"\n",(0,n.jsx)(a.p,{children:"A variable can change its type based on assigned values:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-sql",children:'declare data\r\ndata to 42\r\ndata to "forty-two"\r\ndata to true\n'})}),"\n",(0,n.jsx)(a.hr,{}),"\n",(0,n.jsx)(a.h2,{id:"summary-table",children:"Summary Table"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Syntax"}),(0,n.jsx)(a.th,{children:"Purpose"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"declare varName"})}),(0,n.jsx)(a.td,{children:"Declares a variable"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"declare var1, var2, var3"})}),(0,n.jsx)(a.td,{children:"Declares multiple variables in one line"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"declare var1, arr1[], arr2[5]"})}),(0,n.jsx)(a.td,{children:"Declares variables and arrays together"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"set varName to value"})}),(0,n.jsx)(a.td,{children:"Assigns a value"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"varName to value"})}),(0,n.jsx)(a.td,{children:"Reassigns a new value"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"declare array[n]"})}),(0,n.jsx)(a.td,{children:"Declares a fixed-length array"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"declare array[]"})}),(0,n.jsx)(a.td,{children:"Declares a dynamic-length array"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"array[index]"})}),(0,n.jsx)(a.td,{children:"Access or modify array elements"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"null"})}),(0,n.jsx)(a.td,{children:"Represents an uninitialized or empty value"})]})]})]})]})}function o(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,a,r)=>{r.d(a,{R:()=>i,x:()=>d});var s=r(6540);const n={},l=s.createContext(n);function i(e){const a=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(l.Provider,{value:a},e.children)}}}]);