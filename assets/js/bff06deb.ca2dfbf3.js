"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[3986],{6260:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"libraries/listener","title":"Listener Library Reference","description":"The listener library lets you build simple TCP\u2011based servers (for HTTP, custom protocols, etc.) entirely in EasyBite. You can:","source":"@site/docs/libraries/listener.md","sourceDirName":"libraries","slug":"/libraries/listener","permalink":"/libraries/listener","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/libraries/listener.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Requester Library Reference","permalink":"/libraries/requester"},"next":{"title":"System Library Reference","permalink":"/libraries/system"}}');var i=r(4848),t=r(8453);const c={},l="Listener Library Reference",d={},o=[{value:"Importing",id:"importing",level:2},{value:"Available Functions",id:"available-functions",level:2},{value:"Examples",id:"examples",level:2},{value:"1. Bind &amp; Listen",id:"1-bind--listen",level:3},{value:"2. Accept &amp; Read One Request",id:"2-accept--read-one-request",level:3},{value:"3. Send an HTTP Response",id:"3-send-an-http-response",level:3},{value:"4. Serve Forever with Callback",id:"4-serve-forever-with-callback",level:3},{value:"5. Fetch Client Info",id:"5-fetch-client-info",level:3},{value:"Shutdown &amp; Cleanup",id:"shutdown--cleanup",level:2},{value:"Conclusion",id:"conclusion",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"listener-library-reference",children:"Listener Library Reference"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"listener"})," library lets you build simple TCP\u2011based servers (for HTTP, custom protocols, etc.) entirely in EasyBite. You can:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bind"})," to a socket address"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Listen"})," for incoming connections, either a fixed number or until shutdown"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Accept"})," connections on demand"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Serve forever"}),", optionally invoking an EasyBite callback for each connection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Read"})," raw request data and ",(0,i.jsx)(n.strong,{children:"send"})," formatted responses"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Retrieve"})," client info (addresses, raw socket handle)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shutdown"})," and ",(0,i.jsx)(n.strong,{children:"join"})," the server thread when you\u2019re done"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["All you need is EasyBite\u2019s ",(0,i.jsx)(n.code,{children:"listener"})," module\u2014no external scripting or manual thread management."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"importing",children:"Importing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import listener\r\n\r\n// or pick specific functions\r\nfrom listener import bind, listen, accept, response, readrequest, shutdown, clientinfo\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"available-functions",children:"Available Functions"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Function"}),(0,i.jsx)(n.th,{children:"Parameters"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"bind(addr)"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"addr"})," (String)"]}),(0,i.jsxs)(n.td,{children:["Bind a new server to the given address (",(0,i.jsx)(n.code,{children:'"host:port"'}),") and store it globally."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"listen([max_clients])"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"max_clients"})," (Number, optional)"]}),(0,i.jsxs)(n.td,{children:["Start accepting connections in a background thread. Stops after ",(0,i.jsx)(n.code,{children:"max_clients"})," or on shutdown."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"start_server([server])"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"server"})," (HTTPListener, optional)"]}),(0,i.jsx)(n.td,{children:"Ensure one connection is accepted (blocks if none). Useful for simple single\u2011request servers."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"serve_forever([server,] [callback])"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"server"})," (HTTPListener, optional), ",(0,i.jsx)(n.code,{children:"callback"})," (Function, optional)"]}),(0,i.jsxs)(n.td,{children:["Loop forever, accept each connection and\u2014if ",(0,i.jsx)(n.code,{children:"callback"})," given\u2014invoke it in a new thread."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"accept([server])"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"server"})," (HTTPListener, optional)"]}),(0,i.jsx)(n.td,{children:"Accept one connection (blocks if none queued)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"join()"})}),(0,i.jsx)(n.td,{children:"\u2014"}),(0,i.jsx)(n.td,{children:"Wait for the server\u2019s accept thread to finish (after shutdown or max clients)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"response([conn,] message, [options])"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"conn"})," (TCPConnection, optional), ",(0,i.jsx)(n.code,{children:"message"})," (String), ",(0,i.jsx)(n.code,{children:"options"})," (Dictionary, optional)"]}),(0,i.jsxs)(n.td,{children:["Send an HTTP\u2011style response. ",(0,i.jsx)(n.code,{children:"options"})," may include ",(0,i.jsx)(n.code,{children:'"status"'})," (e.g. ",(0,i.jsx)(n.code,{children:'"404 Not Found"'}),") and ",(0,i.jsx)(n.code,{children:'"headers"'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"readrequest([conn])"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"conn"})," (TCPConnection, optional)"]}),(0,i.jsx)(n.td,{children:"Read up to 1024 bytes from the connection and return as a String."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"shutdown([server])"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"server"})," (HTTPListener, optional)"]}),(0,i.jsx)(n.td,{children:"Signal the background accept loop to stop."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"clientinfo([conn])"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"conn"})," (TCPConnection, optional)"]}),(0,i.jsxs)(n.td,{children:["Return a Dictionary with ",(0,i.jsx)(n.code,{children:'"peer_addr"'}),", ",(0,i.jsx)(n.code,{children:'"local_addr"'}),", and platform\u2011specific ",(0,i.jsx)(n.code,{children:'"raw_fd"'})," or ",(0,i.jsx)(n.code,{children:'"raw_socket"'}),"."]})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"1-bind--listen",children:"1. Bind & Listen"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import listener\r\n\r\nset server to listener.bind("0.0.0.0:8080")\r\nset msg to listener.listen(3)\r\nshow(msg)\r\n// Output:\r\n// Listening on 0.0.0.0:8080\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Binds to port 8080 and starts accepting up to 3 clients in a background thread."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"2-accept--read-one-request",children:"2. Accept & Read One Request"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// Accept one connection (blocks until a client connects)\r\nset conn to listener.accept()\r\n// Read raw request data\r\nset req to listener.readrequest(conn)\r\nshow(req)\r\n// Output (example):\r\n// "GET / HTTP/1.1\\r\\nHost: localhost:8080\\r\\n\\r\\n"\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," You can also use ",(0,i.jsx)(n.code,{children:"listener.accept(conn)"})," to accept a specific HTTPListener connection"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"3-send-an-http-response",children:"3. Send an HTTP Response"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// Send a simple text response\r\nlistener.response(conn, "Hello, EasyBite!", {"headers":{"Content-Type":"text/plain"}})\r\n// No return value; client receives:\r\n// HTTP/1.1 200 OK\r\n// Content-Length: 14\r\n// Content-Type: text/plain\r\n//\r\n// Hello, EasyBite!\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"4-serve-forever-with-callback",children:"4. Serve Forever with Callback"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// Define a handler function\r\nfunction handler(c)\r\n    // Read the request\r\n    set r to listener.readrequest(c)\r\n    // Send back a greeting\r\n    listener.response(c, "You said:\\r\\n" + r, {"status":"200 OK","headers":{"Content-Type":"text/plain"}})\r\nend function\r\n\r\n// Start accept loop, calling handler for each connection\r\nlistener.serve_forever(server, handler)\r\n\r\n// ... elsewhere, to stop:\r\nlistener.shutdown(server)\r\nlistener.join()\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"serve_forever"})," will block the current script until you call ",(0,i.jsx)(n.code,{children:"shutdown"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Each new connection runs ",(0,i.jsx)(n.code,{children:"handler"})," in its own thread."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"5-fetch-client-info",children:"5. Fetch Client Info"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// After you accept a connection:\r\nset info to listener.clientinfo(conn)\r\nshow(info["peer_addr"])\r\nshow(info["local_addr"])\r\nshow(info["raw_fd"])      // on Unix\r\n// Output:\r\n// "127.0.0.1:52344"\r\n// "0.0.0.0:8080"\r\n// 5\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Provides low\u2011level details if you need to integrate with other systems."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"shutdown--cleanup",children:"Shutdown & Cleanup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Gracefully stop accepting\r\nlistener.shutdown(server)\r\n// Wait for the background thread to exit\r\nlistener.join()\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"listener"})," you can spin up TCP servers, handle raw requests, and send custom responses\u2014all with EasyBite\u2019s familiar syntax:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"bind"})})," \u2192 open a port"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"listen"})})," \u2192 background accept loop"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"accept"})})," \u2192 manual accept"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"serve_forever"})})," \u2192 endless accept + callback"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"readrequest"})})," / ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"response"})})," \u2192 your request/response logic"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"shutdown"})})," / ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"join"})})," \u2192 clean exit"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"No manual socket API calls or thread boilerplate\u2014just EasyBite code."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var s=r(6540);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);