"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[3891],{2484:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"functions/function-call","title":"Calling Functions","description":"Calling a function is how you execute the block of code you defined with function \u2026 end function. In EasyBite, function calls look like small statements: you write the function\u2019s name, give it the inputs (arguments), and optionally capture its output. This guide will walk you through every detail\u2014even if you\u2019ve never called a function before.","source":"@site/docs/functions/function-call.md","sourceDirName":"functions","slug":"/functions/function-call","permalink":"/functions/function-call","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/functions/function-call.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Default Arguments","permalink":"/functions/default-arguments"},"next":{"title":"Variable Scope","permalink":"/functions/variable-scope"}}');var t=s(4848),i=s(8453);const l={},a="Calling Functions",c={},o=[{value:"Table of Contents",id:"table-of-contents",level:3},{value:"Why Function Calls Matter",id:"why-function-calls-matter",level:2},{value:"Basic Call Syntax",id:"basic-call-syntax",level:2},{value:"Passing Arguments",id:"passing-arguments",level:2},{value:"Required Arguments",id:"required-arguments",level:3},{value:"Default Arguments",id:"default-arguments",level:3},{value:"Storing Return Values",id:"storing-return-values",level:2},{value:"Calling Procedures (No Return Value)",id:"calling-procedures-no-return-value",level:2},{value:"Nested Calls",id:"nested-calls",level:2},{value:"Recursion Calls",id:"recursion-calls",level:2},{value:"Common Mistakes &amp; How to Fix Them",id:"common-mistakes--how-to-fix-them",level:2},{value:"Tips &amp; Best Practices",id:"tips--best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"calling-functions",children:"Calling Functions"})}),"\n",(0,t.jsxs)(n.p,{children:["Calling a function is how you ",(0,t.jsx)(n.strong,{children:"execute"})," the block of code you defined with ",(0,t.jsx)(n.code,{children:"function \u2026 end function"}),". In EasyBite, function calls look like small statements: you write the function\u2019s name, give it the inputs (arguments), and optionally capture its output. This guide will walk you through every detail\u2014even if you\u2019ve never called a function before."]}),"\n",(0,t.jsx)(n.h3,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#calling-functions",children:"Calling Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#table-of-contents",children:"Table of Contents"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#why-function-calls-matter",children:"Why Function Calls Matter"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#basic-call-syntax",children:"Basic Call Syntax"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#passing-arguments",children:"Passing Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#required-arguments",children:"Required Arguments"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#default-arguments",children:"Default Arguments"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#storing-return-values",children:"Storing Return Values"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#calling-procedures-no-return-value",children:"Calling Procedures (No Return Value)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#nested-calls",children:"Nested Calls"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#recursion-calls",children:"Recursion Calls"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#common-mistakes--how-to-fix-them",children:"Common Mistakes & How to Fix Them"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#tips--best-practices",children:"Tips & Best Practices"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"why-function-calls-matter",children:"Why Function Calls Matter"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reuse your logic"}),": Once you write a function, you can call it as many times as you like without rewriting its body."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keep code tidy"}),": Function calls abstract away details\u2014readers see just the name and arguments."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Chain behaviors"}),": You can feed the output of one function into another, creating powerful pipelines."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Understanding how to call functions is your first step to modular, maintainable EasyBite code."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"basic-call-syntax",children:"Basic Call Syntax"}),"\n",(0,t.jsx)(n.p,{children:"The simplest function call is just the function name plus parentheses:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function sayHello()\r\n    show "Hello, world!"\r\nend function\r\n\r\n// Call it:\r\nsayHello()\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sayHello()"})," tells EasyBite: \u201cRun the code in the function called ",(0,t.jsx)(n.code,{children:"sayHello"}),".\u201d"]}),"\n",(0,t.jsxs)(n.li,{children:["Even with ",(0,t.jsx)(n.strong,{children:"no parameters"}),", you still include the ",(0,t.jsx)(n.code,{children:"()"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"passing-arguments",children:"Passing Arguments"}),"\n",(0,t.jsxs)(n.p,{children:["Most functions need data to work with\u2014these are ",(0,t.jsx)(n.strong,{children:"arguments"}),". You place them inside the parentheses, separated by commas."]}),"\n",(0,t.jsx)(n.h3,{id:"required-arguments",children:"Required Arguments"}),"\n",(0,t.jsxs)(n.p,{children:["If your function signature lists parameters without defaults, you ",(0,t.jsx)(n.strong,{children:"must"})," pass values in the same order:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function add(a, b)\r\n    return a + b\r\nend function\r\n\r\n// Correct:\r\nset sum to add(4, 7)   // sum = 11\r\n\r\n// \u274c Incorrect (missing one argument):\r\nadd(4)                 // Error: b is undefined\n"})}),"\n",(0,t.jsx)(n.h3,{id:"default-arguments",children:"Default Arguments"}),"\n",(0,t.jsxs)(n.p,{children:["If a function parameter has a default, you can ",(0,t.jsx)(n.strong,{children:"omit"})," that argument. EasyBite will fill in the default for you:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function greet(name, greeting to "Hello")\r\n    show greeting + ", " + name + "!"\r\nend function\r\n\r\ngreet("Alice")                // Uses default \u2192 "Hello, Alice!"\r\ngreet("Bob", "Hi")            // Overrides default \u2192 "Hi, Bob!"\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"storing-return-values",children:"Storing Return Values"}),"\n",(0,t.jsxs)(n.p,{children:["When a function uses ",(0,t.jsx)(n.code,{children:"return"}),", it hands back a value. To use that value later, you ",(0,t.jsx)(n.strong,{children:"capture"})," it in a variable with ",(0,t.jsx)(n.code,{children:"set \u2026 to"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function multiply(x, y)\r\n    return x * y\r\nend function\r\n\r\nset result to multiply(5, 3)\r\nshow "5 \xd7 3 = " + result    // Displays: 5 \xd7 3 = 15\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"set result to multiply(5, 3)"})," runs ",(0,t.jsx)(n.code,{children:"multiply"}),", then stores its return in ",(0,t.jsx)(n.code,{children:"result"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["You can then use ",(0,t.jsx)(n.code,{children:"result"})," elsewhere in your code."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"calling-procedures-no-return-value",children:"Calling Procedures (No Return Value)"}),"\n",(0,t.jsxs)(n.p,{children:["Some functions perform actions (like showing a message) but don\u2019t ",(0,t.jsx)(n.code,{children:"return"})," anything. These are sometimes called ",(0,t.jsx)(n.strong,{children:"procedures"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function logMessage(msg)\r\n    show "[LOG] " + msg\r\nend function\r\n\r\nlogMessage("Data saved.")   // Displays: [LOG] Data saved.\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["You call them the same way, but you ",(0,t.jsx)(n.strong,{children:"don\u2019t"})," assign them to a variable, because there\u2019s nothing to capture."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"nested-calls",children:"Nested Calls"}),"\n",(0,t.jsx)(n.p,{children:"You can call a function inside another call or expression. EasyBite evaluates the innermost call first:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function square(n)\r\n    return n ^ 2\r\nend function\r\n\r\nfunction sumOfSquares(a, b)\r\n    return square(a) + square(b)\r\nend function\r\n\r\nset total to sumOfSquares(2, 3)\r\n// Evaluates: square(2)=4, square(3)=9, then 4+9=13\r\nshow total                    // Displays: 13\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sumOfSquares(2, 3)"})," calls ",(0,t.jsx)(n.code,{children:"square(2)"})," and ",(0,t.jsx)(n.code,{children:"square(3)"})," before adding."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"recursion-calls",children:"Recursion Calls"}),"\n",(0,t.jsx)(n.p,{children:"With recursion support, a function can call itself. Calling a recursive function looks the same as any other call:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function factorial(n)\r\n    if n <= 1\r\n        return 1\r\n    else\r\n        return n * factorial(n - 1)\r\n    end if\r\nend function\r\n\r\nset fiveFact to factorial(5)\r\n// factorial(5) \u2192 5 \xd7 factorial(4)\r\n// factorial(4) \u2192 4 \xd7 factorial(3)\r\n// \u2026 until factorial(1) \u2192 returns 1\r\n// Result: 120\r\n\r\nshow "5! = " + fiveFact    // Displays: 5! = 120\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Each call to ",(0,t.jsx)(n.code,{children:"factorial"})," gets its own copy of ",(0,t.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"EasyBite handles the call stack automatically."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"common-mistakes--how-to-fix-them",children:"Common Mistakes & How to Fix Them"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Mistake"}),(0,t.jsx)(n.th,{children:"Symptom"}),(0,t.jsx)(n.th,{children:"Fix"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Omitting parentheses on a call"}),(0,t.jsx)(n.td,{children:"Nothing happens"}),(0,t.jsxs)(n.td,{children:["Always write ",(0,t.jsx)(n.code,{children:"functionName()"}),", even if there are no parameters."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Passing arguments in wrong order"}),(0,t.jsx)(n.td,{children:"Wrong result or type error"}),(0,t.jsx)(n.td,{children:"Match the exact order from the function signature."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Forgetting ",(0,t.jsx)(n.code,{children:"set \u2026 to"})," for return values"]}),(0,t.jsx)(n.td,{children:"Value lost, can\u2019t use the output"}),(0,t.jsxs)(n.td,{children:["Use ",(0,t.jsx)(n.code,{children:"set var to functionName(args)"})," when you need the return."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Overwriting a variable with a function name"}),(0,t.jsx)(n.td,{children:"Unexpected behavior or error"}),(0,t.jsx)(n.td,{children:"Use unique variable names, don\u2019t reuse function names."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Mixing required and default arguments wrongly"}),(0,t.jsx)(n.td,{children:"Missing values or extra defaults"}),(0,t.jsx)(n.td,{children:"Put all required parameters first, then defaults."})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"tips--best-practices",children:"Tips & Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Name your functions clearly"}),": ",(0,t.jsx)(n.code,{children:"calculateArea"}),", not just ",(0,t.jsx)(n.code,{children:"area"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use descriptive argument names"}),": In ",(0,t.jsx)(n.code,{children:"add(x, y)"}),", consider ",(0,t.jsx)(n.code,{children:"add(width, height)"})," for clarity."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Capture returns immediately"})," if you need them: ",(0,t.jsx)(n.code,{children:"set result to \u2026"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Log or ",(0,t.jsx)(n.code,{children:"show"})," intermediate results"]})," when debugging nested or recursive calls."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Don\u2019t overnest"}),": if you have more than two levels of nesting, consider splitting into intermediate variables for readability."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["Calling functions is the bridge between ",(0,t.jsx)(n.strong,{children:"defining"})," behavior and ",(0,t.jsx)(n.strong,{children:"executing"})," it. In EasyBite:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"functionName(args\u2026)"})," to invoke."]}),"\n",(0,t.jsx)(n.li,{children:"Pass required arguments in order, omit defaults when desired."}),"\n",(0,t.jsxs)(n.li,{children:["Capture outputs with ",(0,t.jsx)(n.code,{children:"set \u2026 to"})," when ",(0,t.jsx)(n.code,{children:"return"})," is used."]}),"\n",(0,t.jsxs)(n.li,{children:["Parentheses ",(0,t.jsx)(n.code,{children:"()"})," are always required."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Practice by writing small functions (greetings, math operations, string handlers) and call them in various ways\u2014mix arguments, nest calls, even try simple recursion. With these skills, you\u2019ll be confidently orchestrating your EasyBite programs, one function call at a time!"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);