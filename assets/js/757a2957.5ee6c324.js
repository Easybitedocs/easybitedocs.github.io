"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[9160],{7556:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"functions/default-arguments","title":"Default Arguments","description":"Default arguments (also called default parameters) let you specify a fallback value for a function\u2019s parameter when the caller doesn\u2019t provide one. This feature makes your functions more flexible, reduces repetition, and documents common use cases right in the function signature. In EasyBite, default arguments are expressed using the to keyword\u2014or, if you prefer a more explicit style, with set \u2026 to. Below, we\u2019ll dive into every detail you need to understand, step by step, with plenty of examples and explanations for absolute beginners.","source":"@site/docs/functions/default-arguments.md","sourceDirName":"functions","slug":"/functions/default-arguments","permalink":"/functions/default-arguments","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/functions/default-arguments.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Functions","permalink":"/functions/function-concept"},"next":{"title":"Calling Functions","permalink":"/functions/function-call"}}');var i=s(4848),r=s(8453);const l={},a="Default Arguments",o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Why Default Arguments Matter",id:"why-default-arguments-matter",level:2},{value:"Conceptual Overview",id:"conceptual-overview",level:2},{value:"Syntax Variants in EasyBite",id:"syntax-variants-in-easybite",level:2},{value:"Using <code>to</code>",id:"using-to",level:3},{value:"Using <code>set \u2026 to</code>",id:"using-set--to",level:3},{value:"Parameter Order Rules",id:"parameter-order-rules",level:2},{value:"How Defaults Are Applied at Call Time",id:"how-defaults-are-applied-at-call-time",level:2},{value:"Step\u2011by\u2011Step Example: Greeting Function",id:"stepbystep-example-greeting-function",level:2},{value:"Example: Power Function with Default Exponent",id:"example-power-function-with-default-exponent",level:2},{value:"Example: Recursive Factorial with Defaults",id:"example-recursive-factorial-with-defaults",level:2},{value:"Common Pitfalls and How to Avoid Them",id:"common-pitfalls-and-how-to-avoid-them",level:2},{value:"Tips &amp; Best Practices",id:"tips--best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"default-arguments",children:"Default Arguments"})}),"\n",(0,i.jsxs)(n.p,{children:["Default arguments (also called default parameters) let you specify a fallback value for a function\u2019s parameter when the caller doesn\u2019t provide one. This feature makes your functions more flexible, reduces repetition, and documents common use cases right in the function signature. In EasyBite, default arguments are expressed using the ",(0,i.jsx)(n.code,{children:"to"})," keyword\u2014or, if you prefer a more explicit style, with ",(0,i.jsx)(n.code,{children:"set \u2026 to"}),". Below, we\u2019ll dive into every detail you need to understand, step by step, with plenty of examples and explanations for absolute beginners."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#default-arguments",children:"Default Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#table-of-contents",children:"Table of Contents"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#why-default-arguments-matter",children:"Why Default Arguments Matter"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#conceptual-overview",children:"Conceptual Overview"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#syntax-variants-in-easybite",children:"Syntax Variants in EasyBite"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"#using-to",children:["Using ",(0,i.jsx)(n.code,{children:"to"})]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"#using-set--to",children:["Using ",(0,i.jsx)(n.code,{children:"set \u2026 to"})]})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#parameter-order-rules",children:"Parameter Order Rules"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#how-defaults-are-applied-at-call-time",children:"How Defaults Are Applied at Call Time"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#stepbystep-example-greeting-function",children:"Step\u2011by\u2011Step Example: Greeting Function"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example-power-function-with-default-exponent",children:"Example: Power Function with Default Exponent"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example-recursive-factorial-with-defaults",children:"Example: Recursive Factorial with Defaults"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#common-pitfalls-and-how-to-avoid-them",children:"Common Pitfalls and How to Avoid Them"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#tips--best-practices",children:"Tips & Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"why-default-arguments-matter",children:"Why Default Arguments Matter"}),"\n",(0,i.jsx)(n.p,{children:"Imagine you have a function that prints a message to the screen. Most of the time, you want it to say \u201cHello,\u201d but occasionally you\u2019ll want \u201cHi,\u201d \u201cGreetings,\u201d or something else. Without default arguments, you\u2019d have to write multiple versions of the function, or always pass the word \u201cHello\u201d explicitly. Default arguments solve this by letting you:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write less code"}),": You don\u2019t need overloaded versions or repeated literal values in every call."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Increase readability"}),": The function signature itself documents what happens when you omit parameters."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reduce errors"}),": If you change the common default, you update it in one place, not in dozens of calls."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conceptual-overview",children:"Conceptual Overview"}),"\n",(0,i.jsx)(n.p,{children:"A default argument is simply a parameter that has an assigned value in the function definition. If the caller provides a value for that parameter, EasyBite uses it. If the caller omits it, EasyBite \u201cfills in\u201d the default. You can think of the function signature as saying, \u201cI need these two things, and if you don\u2019t give me the second one, I\u2019ll use this default instead.\u201d"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"syntax-variants-in-easybite",children:"Syntax Variants in EasyBite"}),"\n",(0,i.jsx)(n.p,{children:"EasyBite supports two equivalent ways to define defaults. Pick the style you like:"}),"\n",(0,i.jsxs)(n.h3,{id:"using-to",children:["Using ",(0,i.jsx)(n.code,{children:"to"})]}),"\n",(0,i.jsx)(n.p,{children:"This concise style attaches the default right to the parameter name:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function functionName(param1 to default1, param2 to default2, ...)\r\n    // function body\r\nend function\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"param1 to default1"})," means: \u201cInside the function, if the caller didn\u2019t pass a value for ",(0,i.jsx)(n.code,{children:"param1"}),", treat it as ",(0,i.jsx)(n.code,{children:"default1"}),".\u201d"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"using-set--to",children:["Using ",(0,i.jsx)(n.code,{children:"set \u2026 to"})]}),"\n",(0,i.jsx)(n.p,{children:"For those who prefer the familiar assignment keyword, you can write:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function functionName(set param1 to default1, set param2 to default2, ...)\r\n    // function body\r\nend function\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"set param1 to default1"})," reads like regular variable initialization but within the signature."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Both forms compile to the same behavior; choose whichever reads best to you."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"parameter-order-rules",children:"Parameter Order Rules"}),"\n",(0,i.jsxs)(n.p,{children:["EasyBite requires that ",(0,i.jsx)(n.strong,{children:"all required parameters"})," (those without defaults) come ",(0,i.jsx)(n.strong,{children:"before"})," any parameters with defaults. This rule prevents confusion about which argument matches which parameter. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"-- \u2705 Correct: requiredParam first, then defaultParam\r\nfunction example(requiredParam, optionalParam to 42)\r\n    ...\r\nend function\r\n\r\n-- \u274c Incorrect: defaultParam before requiredParam\r\nfunction broken(defaultParam to 42, requiredParam)\r\n    ...\r\nend function\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you try the broken version, EasyBite will raise a syntax error because it cannot unambiguously map arguments."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"how-defaults-are-applied-at-call-time",children:"How Defaults Are Applied at Call Time"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Count arguments"}),": When you call ",(0,i.jsx)(n.code,{children:"foo(a, b)"}),", EasyBite sees two arguments."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Match to parameters"}),": It assigns them to the first two parameters in the signature."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fill in missing"}),": If the signature has more parameters with defaults, EasyBite assigns each missing one its default value, in left\u2011to\u2011right order."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execute body"}),": Inside the function, every parameter has a well\u2011defined value, whether supplied or default."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By understanding this process, you\u2019ll avoid surprises when mixing required and default parameters."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"stepbystep-example-greeting-function",children:"Step\u2011by\u2011Step Example: Greeting Function"}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s build a real greeting function from scratch, explaining every detail."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'function greet(name, greeting to "Hello")\r\n    show greeting + ", " + name + "!"\r\nend function\n'})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature breakdown"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"}),": required parameter, caller must supply."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'greeting to "Hello"'}),": optional, defaults to ",(0,i.jsx)(n.code,{children:'"Hello"'}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Calling with both arguments"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'greet("Alice", "Hi")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"}),' \u2190 "Alice"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"greeting"}),' \u2190 "Hi"']}),"\n",(0,i.jsxs)(n.li,{children:["Displays: ",(0,i.jsx)(n.strong,{children:"Hi, Alice!"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Calling with only the required"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'greet("Bob")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"}),' \u2190 "Bob"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"greeting"})," defaults to ",(0,i.jsx)(n.code,{children:'"Hello"'})]}),"\n",(0,i.jsxs)(n.li,{children:["Displays: ",(0,i.jsx)(n.strong,{children:"Hello, Bob!"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why it\u2019s beginner\u2011friendly"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You see the default right in the signature."}),"\n",(0,i.jsx)(n.li,{children:"You don\u2019t have to remember a separate constant."}),"\n",(0,i.jsx)(n.li,{children:"Your calls stay concise when you\u2019re fine with the common case."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"example-power-function-with-default-exponent",children:"Example: Power Function with Default Exponent"}),"\n",(0,i.jsxs)(n.p,{children:["Calculate ",(0,i.jsx)(n.code,{children:"base"})," to the power of ",(0,i.jsx)(n.code,{children:"exponent"}),", defaulting to square:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function power(base, exponent to 2)\r\n    return base ^ exponent\r\nend function\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"power(5)"})," \u2192 ",(0,i.jsx)(n.code,{children:"5 ^ 2 = 25"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"power(3, 3)"})," \u2192 ",(0,i.jsx)(n.code,{children:"3 ^ 3 = 27"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"power(7, 1)"})," \u2192 ",(0,i.jsx)(n.code,{children:"7 ^ 1 = 7"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Detailed walkthrough"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Call ",(0,i.jsx)(n.code,{children:"power(5)"}),". EasyBite sees one argument \u2192 ",(0,i.jsx)(n.code,{children:"base = 5"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Next parameter ",(0,i.jsx)(n.code,{children:"exponent"})," has a default \u2192 ",(0,i.jsx)(n.code,{children:"exponent = 2"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Compute ",(0,i.jsx)(n.code,{children:"5 ^ 2"})," and return ",(0,i.jsx)(n.code,{children:"25"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"example-recursive-factorial-with-defaults",children:"Example: Recursive Factorial with Defaults"}),"\n",(0,i.jsx)(n.p,{children:"With recursion now supported, you can even combine it with defaults:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function factorial(n, accumulator to 1)\r\n    if n <= 1\r\n        return accumulator\r\n    else\r\n        -- multiply accumulator by n, then recurse\r\n        return factorial(n - 1, accumulator * n)\r\n    end if\r\nend function\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Calling ",(0,i.jsx)(n.code,{children:"factorial(5)"})," runs as:","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"n=5, accumulator=1"})," \u2192 recurse with ",(0,i.jsx)(n.code,{children:"n=4, accumulator=5"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"n=4, accumulator=5"})," \u2192 recurse with ",(0,i.jsx)(n.code,{children:"n=3, accumulator=20"})]}),"\n",(0,i.jsxs)(n.li,{children:["\u2026 until ",(0,i.jsx)(n.code,{children:"n=1"})," \u2192 return ",(0,i.jsx)(n.code,{children:"120"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This tail\u2011recursive style is both efficient and clear. The default ",(0,i.jsx)(n.code,{children:"accumulator"})," means you never have to think about the second parameter when you want the simple ",(0,i.jsx)(n.code,{children:"n!"})," result."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls-and-how-to-avoid-them",children:"Common Pitfalls and How to Avoid Them"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Swapping order"}),": Always place required parameters first."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Overriding defaults unintentionally"}),": If you pass ",(0,i.jsx)(n.code,{children:"nil"})," or an empty string, EasyBite treats it as a provided value, not a signal to use the default."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mutable defaults (future)"}),": If EasyBite adds lists or tables as defaults, be careful\u2014they may be shared across calls. For now, stick to numbers, strings, or booleans."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Too many defaults"}),": If you have more than two or three defaults, consider breaking into multiple functions or using configuration objects for clarity."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"tips--best-practices",children:"Tips & Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Choose sensible defaults"})," that cover 80% of your use cases."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document each default"})," in comments above the function to explain \u201cwhy this value?\u201d"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep function signatures short"}),": more than four parameters (including defaults) can confuse callers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Use the explicit ",(0,i.jsx)(n.code,{children:"set \u2026 to"})," style"]})," when you want the signature to read like variable initialization."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write examples"})," in your code comments showing both the default\u2011omitting call and the override call."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["Default arguments in EasyBite empower you to write cleaner, more expressive functions. By using the simple ",(0,i.jsx)(n.code,{children:"to"})," syntax (or ",(0,i.jsx)(n.code,{children:"set \u2026 to"})," if you prefer), you can:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Omit common values in your calls."}),"\n",(0,i.jsx)(n.li,{children:"Document behavior right in the signature."}),"\n",(0,i.jsx)(n.li,{children:"Combine seamlessly with recursion or loops for powerful patterns."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);