"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[7167],{3493:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"libraries/string","title":"String Library Reference","description":"The string library in EasyBite offers a rich set of functions for working with text. You can use these functions either by calling them directly on string values (e.g. \\"hello\\".count()) or by importing the string module and invoking them as string.count(\\"hello\\"), or by importing specific functions with from string import count.","source":"@site/docs/libraries/string.md","sourceDirName":"libraries","slug":"/libraries/string","permalink":"/libraries/string","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/libraries/string.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Math Library Reference","permalink":"/libraries/math"},"next":{"title":"Array Library Reference","permalink":"/libraries/array"}}');var t=s(4848),i=s(8453);const d={},c="String Library Reference",l={},o=[{value:"Available Functions",id:"available-functions",level:2},{value:"Examples",id:"examples",level:2},{value:"<code>count(str)</code>",id:"countstr",level:3},{value:"<code>contains(str, sub)</code>",id:"containsstr-sub",level:3},{value:"<code>replace(str, old, new)</code>",id:"replacestr-old-new",level:3},{value:"<code>substring(str, start, end)</code>",id:"substringstr-start-end",level:3},{value:"<code>uppercase(str)</code>",id:"uppercasestr",level:3},{value:"<code>lowercase(str)</code>",id:"lowercasestr",level:3},{value:"<code>capitalize(str)</code>",id:"capitalizestr",level:3},{value:"<code>reverse(str)</code>",id:"reversestr",level:3},{value:"<code>join(arr, sep)</code>",id:"joinarr-sep",level:3},{value:"<code>tolist(str, sep)</code>",id:"toliststr-sep",level:3},{value:"<code>compare(str1, str2)</code>",id:"comparestr1-str2",level:3},{value:"<code>trim(str)</code>",id:"trimstr",level:3},{value:"<code>startswith(str, prefix)</code>",id:"startswithstr-prefix",level:3},{value:"<code>endswith(str, suffix)</code>",id:"endswithstr-suffix",level:3},{value:"<code>strremove(str, sub)</code>",id:"strremovestr-sub",level:3},{value:"<code>split(str, sep)</code>",id:"splitstr-sep",level:3},{value:"<code>find(str, sub)</code>",id:"findstr-sub",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"string-library-reference",children:"String Library Reference"})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"string"})," library in EasyBite offers a rich set of functions for working with text. You can use these functions either by calling them directly on string values (e.g. ",(0,t.jsx)(r.code,{children:'"hello".count()'}),") or by importing the ",(0,t.jsx)(r.code,{children:"string"})," module and invoking them as ",(0,t.jsx)(r.code,{children:'string.count("hello")'}),", or by importing specific functions with ",(0,t.jsx)(r.code,{children:"from string import count"}),"."]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"available-functions",children:"Available Functions"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Function"}),(0,t.jsx)(r.th,{children:"Parameters"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"count(str)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"})," (String)"]}),(0,t.jsxs)(r.td,{children:["Returns the number of characters in ",(0,t.jsx)(r.code,{children:"str"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"contains(str, sub)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"}),", ",(0,t.jsx)(r.code,{children:"sub"})," (Strings)"]}),(0,t.jsxs)(r.td,{children:["Returns ",(0,t.jsx)(r.code,{children:"true"})," if ",(0,t.jsx)(r.code,{children:"sub"})," is found in ",(0,t.jsx)(r.code,{children:"str"}),", otherwise ",(0,t.jsx)(r.code,{children:"false"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"replace(str, old, new)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"}),", ",(0,t.jsx)(r.code,{children:"old"}),", ",(0,t.jsx)(r.code,{children:"new"})," (Strings)"]}),(0,t.jsxs)(r.td,{children:["Returns a new string where all occurrences of ",(0,t.jsx)(r.code,{children:"old"})," are replaced with ",(0,t.jsx)(r.code,{children:"new"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"substring(str, start, end)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"})," (String), ",(0,t.jsx)(r.code,{children:"start"}),", ",(0,t.jsx)(r.code,{children:"end"})," (Numbers)"]}),(0,t.jsxs)(r.td,{children:["Returns the substring of ",(0,t.jsx)(r.code,{children:"str"})," from character index ",(0,t.jsx)(r.code,{children:"start"})," up to (but not including) ",(0,t.jsx)(r.code,{children:"end"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"uppercase(str)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"})," (String)"]}),(0,t.jsxs)(r.td,{children:["Returns ",(0,t.jsx)(r.code,{children:"str"})," converted to all uppercase letters."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"lowercase(str)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"})," (String)"]}),(0,t.jsxs)(r.td,{children:["Returns ",(0,t.jsx)(r.code,{children:"str"})," converted to all lowercase letters."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"capitalize(str)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"})," (String)"]}),(0,t.jsxs)(r.td,{children:["Returns ",(0,t.jsx)(r.code,{children:"str"})," with the first letter of each word capitalized."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"reverse(str)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"})," (String)"]}),(0,t.jsxs)(r.td,{children:["Returns ",(0,t.jsx)(r.code,{children:"str"})," with its characters in reverse order."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"join(arr, sep)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"arr"})," (Array of Strings), ",(0,t.jsx)(r.code,{children:"sep"})," (String)"]}),(0,t.jsxs)(r.td,{children:["Returns a single string made by concatenating the elements of ",(0,t.jsx)(r.code,{children:"arr"}),", separated by ",(0,t.jsx)(r.code,{children:"sep"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"tolist(str, sep)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"}),", ",(0,t.jsx)(r.code,{children:"sep"})," (Strings)"]}),(0,t.jsxs)(r.td,{children:["Splits ",(0,t.jsx)(r.code,{children:"str"})," on each occurrence of ",(0,t.jsx)(r.code,{children:"sep"})," and returns an array of substrings."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"compare(str1, str2)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str1"}),", ",(0,t.jsx)(r.code,{children:"str2"})," (Strings)"]}),(0,t.jsxs)(r.td,{children:["Returns ",(0,t.jsx)(r.code,{children:"-1"})," if ",(0,t.jsx)(r.code,{children:"str1 < str2"}),", ",(0,t.jsx)(r.code,{children:"0"})," if equal, ",(0,t.jsx)(r.code,{children:"1"})," if ",(0,t.jsx)(r.code,{children:"str1 > str2"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"trim(str)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"})," (String)"]}),(0,t.jsxs)(r.td,{children:["Returns ",(0,t.jsx)(r.code,{children:"str"})," with leading and trailing whitespace removed."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"startswith(str, prefix)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"}),", ",(0,t.jsx)(r.code,{children:"prefix"})," (Strings)"]}),(0,t.jsxs)(r.td,{children:["Returns ",(0,t.jsx)(r.code,{children:"true"})," if ",(0,t.jsx)(r.code,{children:"str"})," begins with ",(0,t.jsx)(r.code,{children:"prefix"}),", otherwise ",(0,t.jsx)(r.code,{children:"false"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"endswith(str, suffix)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"}),", ",(0,t.jsx)(r.code,{children:"suffix"})," (Strings)"]}),(0,t.jsxs)(r.td,{children:["Returns ",(0,t.jsx)(r.code,{children:"true"})," if ",(0,t.jsx)(r.code,{children:"str"})," ends with ",(0,t.jsx)(r.code,{children:"suffix"}),", otherwise ",(0,t.jsx)(r.code,{children:"false"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"strremove(str, sub)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"}),", ",(0,t.jsx)(r.code,{children:"sub"})," (Strings)"]}),(0,t.jsxs)(r.td,{children:["Returns a new string with all occurrences of ",(0,t.jsx)(r.code,{children:"sub"})," removed from ",(0,t.jsx)(r.code,{children:"str"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"split(str, sep)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"}),", ",(0,t.jsx)(r.code,{children:"sep"})," (Strings)"]}),(0,t.jsxs)(r.td,{children:["Alias for ",(0,t.jsx)(r.code,{children:"tolist(str, sep)"}),". Splits ",(0,t.jsx)(r.code,{children:"str"})," into an array on ",(0,t.jsx)(r.code,{children:"sep"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"find(str, sub)"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"str"}),", ",(0,t.jsx)(r.code,{children:"sub"})," (Strings)"]}),(0,t.jsxs)(r.td,{children:["Returns the zero-based index of the first occurrence of ",(0,t.jsx)(r.code,{children:"sub"})," in ",(0,t.jsx)(r.code,{children:"str"}),", or ",(0,t.jsx)(r.code,{children:"-1"})," if not found."]})]})]})]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(r.p,{children:["Below are detailed examples for each function, shown in two styles: ",(0,t.jsx)(r.strong,{children:"direct method calls on string values"})," and ",(0,t.jsx)(r.strong,{children:"imported function calls"}),"."]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"countstr",children:(0,t.jsx)(r.code,{children:"count(str)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("Hello, world!".count())\r\n// Output: 13\r\n\r\nimport string\r\nshow(string.count("Hello, world!"))\r\n// Output: 13\r\n\r\nfrom string import count\r\nshow(count("Hello, world!"))\r\n// Output: 13\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"containsstr-sub",children:(0,t.jsx)(r.code,{children:"contains(str, sub)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("EasyBite".contains("Bite"))\r\n// Output: true\r\n\r\nimport string\r\nshow(string.contains("EasyBite", "bite"))\r\n// Output: false  // case-sensitive\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"replacestr-old-new",children:(0,t.jsx)(r.code,{children:"replace(str, old, new)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("foo bar baz".replace("ba", "BA"))\r\n// Output: foo BAr BAz\r\n\r\nimport string\r\nshow(string.replace("foo bar foo", "foo", "qux"))\r\n// Output: qux bar qux\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"substringstr-start-end",children:(0,t.jsx)(r.code,{children:"substring(str, start, end)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("EasyBite".substring(0, 4))\r\n// Output: Easy\r\n\r\nimport string\r\nshow(string.substring("Hello, world!", 7, 12))\r\n// Output: world\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"uppercasestr",children:(0,t.jsx)(r.code,{children:"uppercase(str)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("hello".uppercase())\r\n// Output: HELLO\r\n\r\nimport string\r\nshow(string.uppercase("Hello, EasyBite!"))\r\n// Output: HELLO, EASYBITE!\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"lowercasestr",children:(0,t.jsx)(r.code,{children:"lowercase(str)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("HELLO".lowercase())\r\n// Output: hello\r\n\r\nimport string\r\nshow(string.lowercase("Hello, EasyBite!"))\r\n// Output: hello, easybite!\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"capitalizestr",children:(0,t.jsx)(r.code,{children:"capitalize(str)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("hello easybite".capitalize())\r\n// Output: Hello Easybite\r\n\r\nimport string\r\nshow(string.capitalize("welcome to easybite"))\r\n// Output: Welcome To Easybite\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"reversestr",children:(0,t.jsx)(r.code,{children:"reverse(str)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("abcde".reverse())\r\n// Output: edcba\r\n\r\nimport string\r\nshow(string.reverse("EasyBite"))\r\n// Output: etibysaE\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"joinarr-sep",children:(0,t.jsx)(r.code,{children:"join(arr, sep)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show(["a","b","c"].join("-"))\r\n// Output: a-b-c\r\n\r\nimport string\r\nshow(string.join(["2021","04","19"], "/"))\r\n// Output: 2021/04/19\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"toliststr-sep",children:(0,t.jsx)(r.code,{children:"tolist(str, sep)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("a,b,c".tolist(","))\r\n// Output: ["a","b","c"]\r\n\r\nimport string\r\nshow(string.tolist("one|two|three", "|"))\r\n// Output: ["one","two","three"]\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"comparestr1-str2",children:(0,t.jsx)(r.code,{children:"compare(str1, str2)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("apple".compare("banana"))\r\n// Output: -1\r\n\r\nimport string\r\nshow(string.compare("apple", "apple"))\r\n// Output: 0\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"trimstr",children:(0,t.jsx)(r.code,{children:"trim(str)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("  padded  ".trim())\r\n// Output: padded\r\n\r\nimport string\r\nshow(string.trim("\\t tabbed line \\n"))\r\n// Output: tabbed line\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"startswithstr-prefix",children:(0,t.jsx)(r.code,{children:"startswith(str, prefix)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("EasyBite".startswith("Easy"))\r\n// Output: true\r\n\r\nimport string\r\nshow(string.startswith("EasyBite", "Bite"))\r\n// Output: false\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"endswithstr-suffix",children:(0,t.jsx)(r.code,{children:"endswith(str, suffix)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("filename.txt".endswith(".txt"))\r\n// Output: true\r\n\r\nimport string\r\nshow(string.endswith("filename.txt", ".jpg"))\r\n// Output: false\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"strremovestr-sub",children:(0,t.jsx)(r.code,{children:"strremove(str, sub)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("foo bar foo".strremove("foo"))\r\n// Output: " bar "\r\n\r\nimport string\r\nshow(string.strremove("banana", "na"))\r\n// Output: ba\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"splitstr-sep",children:(0,t.jsx)(r.code,{children:"split(str, sep)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("2021-04-19".split("-"))\r\n// Output: ["2021","04","19"]\r\n\r\nimport string\r\nshow(string.split("a|b|c", "|"))\r\n// Output: ["a","b","c"]\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"findstr-sub",children:(0,t.jsx)(r.code,{children:"find(str, sub)"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'show("hello".find("l"))\r\n// Output: 2\r\n\r\nimport string\r\nshow(string.find("hello", "z"))\r\n// Output: -1\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"string"})," library in EasyBite provides a comprehensive toolbox for all your text\u2011processing needs. You can:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Call these methods ",(0,t.jsx)(r.strong,{children:"directly on string values"}),", for example ",(0,t.jsx)(r.code,{children:'"text".count()'}),"."]}),"\n",(0,t.jsxs)(r.li,{children:["Import the entire module with ",(0,t.jsx)(r.code,{children:"import string"})," and use ",(0,t.jsx)(r.code,{children:"string.method(str, ...)"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:["Import specific functions with ",(0,t.jsx)(r.code,{children:"from string import count, replace"})," to call them directly."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"This flexibility, combined with the clear, consistent syntax of EasyBite, makes string manipulation both powerful and straightforward."})]})}function a(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>c});var n=s(6540);const t={},i=n.createContext(t);function d(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);