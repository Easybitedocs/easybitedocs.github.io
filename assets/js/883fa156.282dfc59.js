"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[5667],{4729:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"oop/oop-concept","title":"Object\u2011Oriented Programming (OOP)","description":"Object\u2011Oriented Programming (OOP) is a paradigm that organizes code around objects\u2014self\u2011contained units that bundle data (attributes) and behavior (methods) together. Rather than thinking of a program as a sequence of instructions, you think of it as a collection of interacting objects, each responsible for its own internal state and actions. This leads to code that is:","source":"@site/docs/oop/oop-concept.md","sourceDirName":"oop","slug":"/oop/oop-concept","permalink":"/oop/oop-concept","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/oop/oop-concept.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Naming Convention","permalink":"/functions/naming-convension"},"next":{"title":"Classes and Objects","permalink":"/oop/classes-objects"}}');var i=s(4848),t=s(8453);const a={},l="Object\u2011Oriented Programming (OOP)",c={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Why OOP?",id:"why-oop",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Classes",id:"classes",level:3},{value:"Instances (Objects)",id:"instances-objects",level:3},{value:"Attributes (Properties)",id:"attributes-properties",level:3},{value:"Methods (Behaviors)",id:"methods-behaviors",level:3},{value:"The Four Pillars of OOP",id:"the-four-pillars-of-oop",level:2},{value:"Encapsulation",id:"encapsulation",level:3},{value:"Example",id:"example",level:4},{value:"Abstraction",id:"abstraction",level:3},{value:"Example",id:"example-1",level:4},{value:"Inheritance",id:"inheritance",level:3},{value:"Example",id:"example-2",level:4},{value:"Polymorphism",id:"polymorphism",level:3},{value:"Basic OOP Syntax in EasyBite",id:"basic-oop-syntax-in-easybite",level:2},{value:"Constructors and <code>new</code>",id:"constructors-and-new",level:2},{value:"Detailed Examples with Outputs",id:"detailed-examples-with-outputs",level:2},{value:"Example 1: Person Class",id:"example-1-person-class",level:3},{value:"Example 2: Vehicle Inheritance",id:"example-2-vehicle-inheritance",level:3},{value:"Why OOP Matters in Practice",id:"why-oop-matters-in-practice",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"objectoriented-programming-oop",children:"Object\u2011Oriented Programming (OOP)"})}),"\n",(0,i.jsxs)(n.p,{children:["Object\u2011Oriented Programming (OOP) is a paradigm that organizes code around ",(0,i.jsx)(n.strong,{children:"objects"}),"\u2014self\u2011contained units that bundle ",(0,i.jsx)(n.strong,{children:"data"})," (attributes) and ",(0,i.jsx)(n.strong,{children:"behavior"})," (methods) together. Rather than thinking of a program as a sequence of instructions, you think of it as a collection of interacting objects, each responsible for its own internal state and actions. This leads to code that is:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modular"}),": Each object is a self\u2011contained building block."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Readable"}),": Classes and objects map directly to real\u2011world concepts."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reusable"}),": You can create multiple instances from one class or extend classes via inheritance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Maintainable"}),": Changes to one class have minimal impact on others."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["EasyBite\u2019s OOP syntax is designed for beginners, offering clear, simple constructs for classes, objects, methods, and the core OOP principles without overwhelming complexity. This guide provides a ",(0,i.jsx)(n.strong,{children:"very detailed"})," and ",(0,i.jsx)(n.strong,{children:"very long"})," walkthrough of OOP in EasyBite, complete with numerous examples and outputs, so that even complete newcomers can follow along confidently."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#objectoriented-programming-oop",children:"Object\u2011Oriented Programming (OOP)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#table-of-contents",children:"Table of Contents"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#why-oop",children:"Why OOP?"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#core-concepts",children:"Core Concepts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#classes",children:"Classes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#instances-objects",children:"Instances (Objects)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#attributes-properties",children:"Attributes (Properties)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#methods-behaviors",children:"Methods (Behaviors)"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#the-four-pillars-of-oop",children:"The Four Pillars of OOP"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#encapsulation",children:"Encapsulation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example",children:"Example"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#abstraction",children:"Abstraction"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example-1",children:"Example"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#inheritance",children:"Inheritance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example-2",children:"Example"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#polymorphism",children:"Polymorphism"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#basic-oop-syntax-in-easybite",children:"Basic OOP Syntax in EasyBite"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"#constructors-and-new",children:["Constructors and ",(0,i.jsx)(n.code,{children:"new"})]})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#detailed-examples-with-outputs",children:"Detailed Examples with Outputs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example-1-person-class",children:"Example 1: Person Class"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example-2-vehicle-inheritance",children:"Example 2: Vehicle Inheritance"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#why-oop-matters-in-practice",children:"Why OOP Matters in Practice"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"why-oop",children:"Why OOP?"}),"\n",(0,i.jsx)(n.p,{children:"As your programs grow, a flat structure of functions and global variables quickly becomes hard to manage. OOP solves this by:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Grouping related data and behavior"})," into classes, making it clear which functions operate on which data."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mapping software design to real\u2011world models"}),", improving understanding and communication."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Promoting reuse"}),": you can instantiate many objects from the same class or extend an existing class to create a new variant."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolating changes"}),": modifications inside one class seldom break code elsewhere."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This makes OOP an essential tool for writing large, robust, and maintainable applications."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.h3,{id:"classes",children:"Classes"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"class"})," is the blueprint for objects. It defines:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Attributes"}),": pieces of data each object will hold."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Methods"}),": functions that define the object\u2019s behavior."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Syntax"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"class ClassName\r\n    set attribute1 to initialValue1\r\n    set attribute2 to initialValue2\r\n\r\n    method methodName(parameters)\r\n        // method body\r\n    end method\r\n\r\n    method anotherMethod()\r\n        // ...\r\n    end method\r\nend class\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"class"})," begins the definition."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"set"})," declares and initializes attributes inside the class."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"method"})," defines a behavior; close methods with ",(0,i.jsx)(n.code,{children:"end method"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Close the class with ",(0,i.jsx)(n.code,{children:"end class"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"No output"})," is produced by merely defining a class."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"instances-objects",children:"Instances (Objects)"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"instance"})," is a concrete object created from a class. In EasyBite, you use the ",(0,i.jsx)(n.code,{children:"new"})," keyword:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"set myObject to new ClassName()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"myObject"})," has its own copy of all attributes defined in ",(0,i.jsx)(n.code,{children:"ClassName"}),". You can create as many instances as you like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"set car1 to new Car()\r\nset car2 to new Car()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Each instance maintains its own state independently."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"attributes-properties",children:"Attributes (Properties)"}),"\n",(0,i.jsxs)(n.p,{children:["Attributes (also called properties or fields) are variables tied to each object. In the ",(0,i.jsx)(n.code,{children:"Car"})," class example, ",(0,i.jsx)(n.code,{children:"color"})," and ",(0,i.jsx)(n.code,{children:"speed"})," are attributes:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'class Car\r\n    set color to ""\r\n    set speed to 0\r\n    // ...\r\nend class\n'})}),"\n",(0,i.jsx)(n.p,{children:"To read or modify:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'set car1 to new Car()\r\nset car1.color to "red"\r\nshow("Car color is " + car1.color)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Car color is red\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"methods-behaviors",children:"Methods (Behaviors)"}),"\n",(0,i.jsx)(n.p,{children:"Methods are functions defined inside a class that operate on the object\u2019s attributes or perform actions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'class Car\r\n    // attributes...\r\n    method start()\r\n        show("Car started.")\r\n    end method\r\nend class\r\n\r\nset myCar to new Car()\r\nmyCar.start()\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Car started.\n"})}),"\n",(0,i.jsx)(n.p,{children:"Methods can take parameters and return values. They implicitly receive the instance they act on."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"the-four-pillars-of-oop",children:"The Four Pillars of OOP"}),"\n",(0,i.jsx)(n.h3,{id:"encapsulation",children:"Encapsulation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Encapsulation"})," bundles an object\u2019s data and methods, controlling access to its internal state. In EasyBite, all attributes are public by default, but you encapsulate by:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Providing methods for any interaction with attributes."}),"\n",(0,i.jsx)(n.li,{children:"Avoiding direct manipulation of attributes outside the class."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'class BankAccount\r\n    set balance to 0\r\n\r\n    method deposit(amount)\r\n        if amount > 0\r\n            set balance to balance + amount\r\n        end if\r\n    end method\r\n\r\n    method getBalance()\r\n        return balance\r\n    end method\r\nend class\r\n\r\nset acct to new BankAccount()\r\nacct.deposit(150)\r\nshow("Balance: " + acct.getBalance())\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Balance: 150\n"})}),"\n",(0,i.jsxs)(n.p,{children:["External code never changes ",(0,i.jsx)(n.code,{children:"balance"})," directly, preserving valid state."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"abstraction",children:"Abstraction"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Abstraction"})," hides complex implementation details and exposes only a simple interface. Class users need not understand internal workings."]}),"\n",(0,i.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"class Timer\r\n    set remaining to 0\r\n\r\n    method start(seconds)\r\n        set remaining to seconds\r\n        // Internal countdown logic is hidden\r\n    end method\r\n\r\n    method isTimeUp()\r\n        return remaining <= 0\r\n    end method\r\nend class\r\n\r\nset t to new Timer()\r\nt.start(5)\r\n// (No visible complexity; user simply checks t.isTimeUp())\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"inheritance",children:"Inheritance"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inheritance"})," allows a subclass to derive from a parent class, inheriting its attributes and methods, while adding or overriding behavior."]}),"\n",(0,i.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'class Animal\r\n    method speak()\r\n        show("An animal makes a sound.")\r\n    end method\r\nend class\r\n\r\nclass Dog inherit Animal\r\n    method speak()\r\n        show("Dog barks.")\r\n    end method\r\nend class\r\n\r\nset a to new Animal()\r\na.speak()\r\nset d to new Dog()\r\nd.speak()\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"An animal makes a sound.\r\nDog barks.\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"polymorphism",children:"Polymorphism"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Polymorphism"})," (\u201cmany forms\u201d) lets you treat different subclasses uniformly through a common interface:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"set creatures to [ new Animal(), new Dog() ]\r\nset i to 1\r\nrepeat while(i <= creatures.length())\r\n    creatures[i].speak()\r\n    set i to i + 1\r\nend repeat\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"An animal makes a sound.\r\nDog barks.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Functions operating on ",(0,i.jsx)(n.code,{children:"Animal"})," objects automatically adapt to ",(0,i.jsx)(n.code,{children:"Dog"})," instances."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"basic-oop-syntax-in-easybite",children:"Basic OOP Syntax in EasyBite"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"class ClassName\r\n    set attribute1 to initialValue1\r\n    set attribute2 to initialValue2\r\n\r\n    method methodName(param1, param2)\r\n        // body\r\n    end method\r\n\r\n    method anotherMethod()\r\n        // ...\r\n    end method\r\nend class\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.strong,{children:"PascalCase"})," for class names (",(0,i.jsx)(n.code,{children:"Car"}),", ",(0,i.jsx)(n.code,{children:"BankAccount"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Define attributes with ",(0,i.jsx)(n.code,{children:"set"})," at the top."]}),"\n",(0,i.jsxs)(n.li,{children:["Define behaviors with ",(0,i.jsx)(n.code,{children:"method"}),"/",(0,i.jsx)(n.code,{children:"end method"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Instantiate with ",(0,i.jsx)(n.code,{children:"new ClassName()"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"constructors-and-new",children:["Constructors and ",(0,i.jsx)(n.code,{children:"new"})]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"constructor"})," runs automatically when you create an object, initializing attributes. Named ",(0,i.jsx)(n.code,{children:"constructor"})," in EasyBite:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'class Person\r\n    set name to ""\r\n    set age to 0\r\n\r\n    init(initialName, initialAge)\r\n        set name to initialName\r\n        set age to initialAge\r\n    end init\r\n\r\n    method introduce()\r\n        show("Name: " + name + ", Age: " + age)\r\n    end method\r\nend class\r\n\r\nset p to new Person("Eve", 22)\r\np.introduce()\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Name: Eve, Age: 22\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You pass initial values directly to ",(0,i.jsx)(n.code,{children:"new Person(...)"}),", and the constructor sets up the object."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"detailed-examples-with-outputs",children:"Detailed Examples with Outputs"}),"\n",(0,i.jsx)(n.h3,{id:"example-1-person-class",children:"Example 1: Person Class"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'class Person\r\n    set name to ""\r\n    set age to 0\r\n\r\n    init(n, a)\r\n        set name to n\r\n        set age to a\r\n    end init\r\n\r\n    method introduce()\r\n        show("Hello, I am " + name + " and I am " + age + " years old.")\r\n    end method\r\nend class\r\n\r\nset alice to new Person("Alice", 30)\r\nalice.introduce()\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Hello, I am Alice and I am 30 years old.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-2-vehicle-inheritance",children:"Example 2: Vehicle Inheritance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'class Vehicle\r\n    set speed to 0\r\n\r\n    init(initialSpeed)\r\n        set speed to initialSpeed\r\n    end init\r\n\r\n    method status()\r\n        show("Speed: " + speed)\r\n    end method\r\nend class\r\n\r\nclass Car inherit Vehicle\r\n    set fuel to 100\r\n\r\n    init(initialSpeed, initialFuel)\r\n        parent.init(initialSpeed)\r\n        set fuel to initialFuel\r\n    end init\r\n\r\n    method refuel(amount)\r\n        set fuel to fuel + amount\r\n        show("Fuel level: " + fuel)\r\n    end method\r\nend class\r\n\r\nset myCar to new Car(50, 80)\r\nmyCar.status()\r\nmyCar.refuel(20)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Speed: 50\r\nFuel level: 100\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"why-oop-matters-in-practice",children:"Why OOP Matters in Practice"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scalability"}),": Large systems break down into manageable classes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Collaboration"}),": Teams work on different classes without interference."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Maintainability"}),": Fixing bugs or adding features is localized to specific classes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reusability"}),": Generic classes (e.g., ",(0,i.jsx)(n.code,{children:"List"}),", ",(0,i.jsx)(n.code,{children:"Timer"}),") can be shared across projects."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(6540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);