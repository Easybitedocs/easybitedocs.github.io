"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[3742],{7223:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"oop/classes-objects","title":"Classes and Objects","description":"Classes and objects are at the heart of Object\u2011Oriented Programming (OOP). In EasyBite, classes let you define new data types\u2014blueprints for objects\u2014while objects are instances of those blueprints, each holding its own data and behavior. This document provides a very detailed, step\u2011by\u2011step guide to defining classes, creating objects, using constructors, and working with inheritance in EasyBite. Every concept is explained in simple terms with multiple examples and outputs so that even complete beginners can follow along.","source":"@site/docs/oop/classes-objects.md","sourceDirName":"oop","slug":"/oop/classes-objects","permalink":"/oop/classes-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/oop/classes-objects.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Object\u2011Oriented Programming (OOP)","permalink":"/oop/oop-concept"},"next":{"title":"Class Attributes","permalink":"/oop/class-attributes"}}');var t=s(4848),r=s(8453);const c={},l="Classes and Objects",o={},a=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What Is a Class?",id:"what-is-a-class",level:2},{value:"Defining a Class",id:"defining-a-class",level:2},{value:"Attributes (Properties)",id:"attributes-properties",level:2},{value:"Methods (Behaviors)",id:"methods-behaviors",level:2},{value:"Constructors with <code>init</code> / <code>end init</code>",id:"constructors-with-init--end-init",level:2},{value:"Creating Objects with <code>new</code>",id:"creating-objects-with-new",level:2},{value:"Accessing Attributes and Calling Methods",id:"accessing-attributes-and-calling-methods",level:2},{value:"Inheritance with <code>inherit</code>",id:"inheritance-with-inherit",level:2},{value:"Best Practices and Tips",id:"best-practices-and-tips",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"classes-and-objects",children:"Classes and Objects"})}),"\n",(0,t.jsxs)(n.p,{children:["Classes and objects are at the heart of Object\u2011Oriented Programming (OOP). In EasyBite, classes let you define new data types\u2014blueprints for objects\u2014while objects are instances of those blueprints, each holding its own data and behavior. This document provides a ",(0,t.jsx)(n.strong,{children:"very detailed"}),", ",(0,t.jsx)(n.strong,{children:"step\u2011by\u2011step"})," guide to defining classes, creating objects, using constructors, and working with inheritance in EasyBite. Every concept is explained in simple terms with multiple examples and outputs so that even complete beginners can follow along."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#classes-and-objects",children:"Classes and Objects"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#table-of-contents",children:"Table of Contents"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#what-is-a-class",children:"What Is a Class?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#defining-a-class",children:"Defining a Class"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#attributes-properties",children:"Attributes (Properties)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#methods-behaviors",children:"Methods (Behaviors)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.a,{href:"#constructors-with-init--end-init",children:["Constructors with ",(0,t.jsx)(n.code,{children:"init"})," / ",(0,t.jsx)(n.code,{children:"end init"})]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.a,{href:"#creating-objects-with-new",children:["Creating Objects with ",(0,t.jsx)(n.code,{children:"new"})]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#accessing-attributes-and-calling-methods",children:"Accessing Attributes and Calling Methods"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.a,{href:"#inheritance-with-inherit",children:["Inheritance with ",(0,t.jsx)(n.code,{children:"inherit"})]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#best-practices-and-tips",children:"Best Practices and Tips"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-class",children:"What Is a Class?"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"class"})," is a blueprint or template that describes:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Attributes"}),": named pieces of data every object of the class will have."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Methods"}),": named functions that every object of the class can perform."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Classes allow you to model real\u2011world concepts (like ",(0,t.jsx)(n.code,{children:"Car"}),", ",(0,t.jsx)(n.code,{children:"Person"}),", ",(0,t.jsx)(n.code,{children:"BankAccount"}),") in code. Once you\u2019ve defined a class, you can create many ",(0,t.jsx)(n.strong,{children:"objects"})," (instances) of that class, each with its own attribute values."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"defining-a-class",children:"Defining a Class"}),"\n",(0,t.jsxs)(n.p,{children:["To define a class in EasyBite, use the ",(0,t.jsx)(n.code,{children:"class"})," keyword, list attributes and methods inside, then close with ",(0,t.jsx)(n.code,{children:"end class"}),". Here\u2019s the basic structure:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"class ClassName\r\n    set attribute1 to initialValue1\r\n    set attribute2 to initialValue2\r\n\r\n    method methodName(param1, param2)\r\n        // method body\r\n    end method\r\n\r\n    // You can define more methods here\r\n\r\nend class\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"class ClassName"})})," begins the definition."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"set attribute to value"})})," declares an attribute and gives it a default."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"method \u2026 end method"})})," defines a behavior."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"end class"})})," closes the class."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Defining a class does ",(0,t.jsx)(n.strong,{children:"not"})," produce any runtime output by itself."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"attributes-properties",children:"Attributes (Properties)"}),"\n",(0,t.jsxs)(n.p,{children:["Attributes (also called properties or fields) hold an object\u2019s data. They are declared with ",(0,t.jsx)(n.code,{children:"set"})," inside the class:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'class Person\r\n    set name to ""    // default empty string\r\n    set age to 0      // default zero\r\nend class\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Every ",(0,t.jsx)(n.code,{children:"Person"})," object will have its own ",(0,t.jsx)(n.code,{children:"name"})," and ",(0,t.jsx)(n.code,{children:"age"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"You can choose sensible defaults or leave strings empty and numbers zero."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"methods-behaviors",children:"Methods (Behaviors)"}),"\n",(0,t.jsxs)(n.p,{children:["Methods are functions that operate on an object\u2019s attributes or perform actions. You define them with ",(0,t.jsx)(n.code,{children:"method"})," and close with ",(0,t.jsx)(n.code,{children:"end method"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'class Person\r\n    set name to ""\r\n    set age to 0\r\n\r\n    method introduce()\r\n        show("Hello, my name is " + name + " and I am " + age + " years old.")\r\n    end method\r\nend class\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Inside a method, you can reference attributes directly by name."}),"\n",(0,t.jsxs)(n.li,{children:["Methods can accept parameters and use ",(0,t.jsx)(n.code,{children:"return"})," to output values."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"constructors-with-init--end-init",children:["Constructors with ",(0,t.jsx)(n.code,{children:"init"})," / ",(0,t.jsx)(n.code,{children:"end init"})]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"constructor"})," is a special method that runs automatically when you create a new object. In EasyBite, the constructor is named ",(0,t.jsx)(n.code,{children:"init"})," and closed with ",(0,t.jsx)(n.code,{children:"end init"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'class Person\r\n    set name to ""\r\n    set age to 0\r\n\r\n    init(initialName, initialAge)\r\n        set name to initialName\r\n        set age to initialAge\r\n    end init\r\n\r\n    method introduce()\r\n        show("Name: " + name + ", Age: " + age)\r\n    end method\r\nend class\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"init(params)"})})," is called immediately when you instantiate the class."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"init"})," to assign initial values to attributes."]}),"\n",(0,t.jsxs)(n.li,{children:["You still close the constructor with ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"end init"})}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"No output"})," occurs until you create and use an instance."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"creating-objects-with-new",children:["Creating Objects with ",(0,t.jsx)(n.code,{children:"new"})]}),"\n",(0,t.jsxs)(n.p,{children:["To create an object (instance) from a class, use the ",(0,t.jsx)(n.code,{children:"new"})," keyword:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'set alice to new Person("Alice", 30)\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This calls the ",(0,t.jsx)(n.code,{children:"init"})," constructor with arguments ",(0,t.jsx)(n.code,{children:'"Alice"'})," and ",(0,t.jsx)(n.code,{children:"30"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The result is stored in the variable ",(0,t.jsx)(n.code,{children:"alice"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Once created, you can interact with the object:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"alice.introduce()\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Output:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Name: Alice, Age: 30\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"accessing-attributes-and-calling-methods",children:"Accessing Attributes and Calling Methods"}),"\n",(0,t.jsx)(n.p,{children:"You can read and write attributes on an object using dot notation, and call methods the same way:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'set bob to new Person("Bob", 25)\r\n\r\n// Access attribute\r\nshow("Bob\'s age: " + bob.age)\r\n// Output:\r\n// Bob\'s age: 25\r\n\r\n// Modify attribute\r\nset bob.age to 26\r\nshow("Bob is now " + bob.age + " years old.")\r\n// Output:\r\n// Bob is now 26 years old.\r\n\r\n// Call method\r\nbob.introduce()\r\n// Output:\r\n// Name: Bob, Age: 26\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"object.attribute"})})," reads or writes data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"object.method()"})})," invokes behavior."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"inheritance-with-inherit",children:["Inheritance with ",(0,t.jsx)(n.code,{children:"inherit"})]}),"\n",(0,t.jsxs)(n.p,{children:["Inheritance lets one class build upon another. Use the ",(0,t.jsx)(n.code,{children:"inherit"})," keyword instead of ",(0,t.jsx)(n.code,{children:"is"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'class Employee inherit Person\r\n    set employeeId to ""\r\n    set position to ""\r\n\r\n    init(name, age, id, positionTitle)\r\n        parent.init(name, age)       // call Person\'s constructor\r\n        set employeeId to id\r\n        set position to positionTitle\r\n    end init\r\n\r\n    method introduce()\r\n        // extend Person\'s introduce\r\n        show("Employee ID: " + employeeId + ", Position: " + position)\r\n    end method\r\nend class\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"class Subclass inherit Superclass"})})," begins the subclass definition."]}),"\n",(0,t.jsxs)(n.li,{children:["Inside the subclass\u2019s ",(0,t.jsx)(n.code,{children:"init"}),", call ",(0,t.jsx)(n.code,{children:"super.init(...)"})," to initialize inherited attributes."]}),"\n",(0,t.jsx)(n.li,{children:"You can override methods or add new ones."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Instantiate an ",(0,t.jsx)(n.code,{children:"Employee"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'set emp to new Employee("Carol", 28, "E123", "Engineer")\r\nemp.introduce()\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Output:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Name: Carol, Age: 28 years old.\r\nEmployee ID: E123, Position: Engineer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["(Note: if you override ",(0,t.jsx)(n.code,{children:"introduce"}),", you may need to call ",(0,t.jsx)(n.code,{children:"parent.introduce()"})," first to show the name and age.)"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices-and-tips",children:"Best Practices and Tips"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PascalCase for class names"}),": ",(0,t.jsx)(n.code,{children:"Person"}),", ",(0,t.jsx)(n.code,{children:"BankAccount"}),", ",(0,t.jsx)(n.code,{children:"Vehicle"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lowercase for attributes and methods"}),": ",(0,t.jsx)(n.code,{children:"name"}),", ",(0,t.jsx)(n.code,{children:"introduce()"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Always define an ",(0,t.jsx)(n.code,{children:"init"})]})," if you need to set up attributes\u2014avoids forgetting to initialize."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Use ",(0,t.jsx)(n.code,{children:"parent.init(...)"})]})," in subclasses to ensure parent attributes get initialized."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keep methods focused"}),": one behavior per method."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document your classes"})," with comments before the ",(0,t.jsx)(n.code,{children:"class"})," keyword to explain purpose."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"In EasyBite, classes and objects give you a powerful way to model complex systems:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Define"})," a class with ",(0,t.jsx)(n.code,{children:"class \u2026 end class"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Declare"})," attributes with ",(0,t.jsx)(n.code,{children:"set"})," and behaviors with ",(0,t.jsx)(n.code,{children:"method \u2026 end method"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Initialize"})," objects using ",(0,t.jsx)(n.code,{children:"init \u2026 end init"})," and create them with ",(0,t.jsx)(n.code,{children:"new ClassName(...)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Extend"})," functionality via inheritance using ",(0,t.jsx)(n.code,{children:"inherit"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"By mastering these building blocks, you can structure your code in a clear, modular, and maintainable way. Happy coding!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);