"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[798],{534:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>t});const l=JSON.parse('{"id":"functions/variable-scope","title":"Variable Scope","description":"Variable scope determines where a variable is accessible within your code. Understanding scope is crucial to avoid naming conflicts, unexpected behaviors, and bugs. In EasyBite, scope rules are simple and beginner\u2011friendly: variables declared at the top level are global, while variables declared inside functions are local to those functions. Blocks like loops and conditionals do not create new scopes\u2014everything inside a function shares that function\u2019s scope.","source":"@site/docs/functions/variable-scope.md","sourceDirName":"functions","slug":"/functions/variable-scope","permalink":"/functions/variable-scope","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/functions/variable-scope.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Calling Functions","permalink":"/functions/function-call"},"next":{"title":"Callbacks in EasyBite","permalink":"/functions/callback-function"}}');var i=s(4848),r=s(8453);const o={},a="Variable Scope",c={},t=[{value:"Table of Contents",id:"table-of-contents",level:3},{value:"Why Scope Matters",id:"why-scope-matters",level:2},{value:"Global Scope",id:"global-scope",level:2},{value:"Local (Function) Scope",id:"local-function-scope",level:2},{value:"Block Scope in EasyBite",id:"block-scope-in-easybite",level:2},{value:"Declaring Variables",id:"declaring-variables",level:2},{value:"Examples of Scope",id:"examples-of-scope",level:2},{value:"Example\xa01: Global vs Local",id:"example1-global-vs-local",level:3},{value:"Example\xa02: Shadowing Variables",id:"example2-shadowing-variables",level:3},{value:"Example\xa03: Loops &amp; Conditionals",id:"example3-loops--conditionals",level:3},{value:"Common Pitfalls &amp; How to Avoid Them",id:"common-pitfalls--how-to-avoid-them",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"variable-scope",children:"Variable Scope"})}),"\n",(0,i.jsxs)(n.p,{children:["Variable scope determines ",(0,i.jsx)(n.strong,{children:"where"})," a variable is accessible within your code. Understanding scope is crucial to avoid naming conflicts, unexpected behaviors, and bugs. In EasyBite, scope rules are simple and beginner\u2011friendly: variables declared at the top level are ",(0,i.jsx)(n.strong,{children:"global"}),", while variables declared inside functions are ",(0,i.jsx)(n.strong,{children:"local"})," to those functions. Blocks like loops and conditionals do ",(0,i.jsx)(n.strong,{children:"not"})," create new scopes\u2014everything inside a function shares that function\u2019s scope."]}),"\n",(0,i.jsx)(n.h3,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#variable-scope",children:"Variable Scope"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#table-of-contents",children:"Table of Contents"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#why-scope-matters",children:"Why Scope Matters"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#global-scope",children:"Global Scope"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#local-function-scope",children:"Local (Function) Scope"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#block-scope-in-easybite",children:"Block Scope in EasyBite"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#declaring-variables",children:"Declaring Variables"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#examples-of-scope",children:"Examples of Scope"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example1-global-vs-local",children:"Example\xa01: Global vs Local"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example2-shadowing-variables",children:"Example\xa02: Shadowing Variables"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#example3-loops--conditionals",children:"Example\xa03: Loops & Conditionals"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#common-pitfalls--how-to-avoid-them",children:"Common Pitfalls & How to Avoid Them"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"why-scope-matters",children:"Why Scope Matters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prevents name clashes"}),": Two variables with the same name can coexist if they\u2019re in different scopes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reduces bugs"}),": You know exactly where a variable is valid and won\u2019t accidentally overwrite it."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Improves readability"}),": Code readers see at a glance which parts of the program can use each variable."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"global-scope",children:"Global Scope"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"global"})," variable is declared ",(0,i.jsx)(n.em,{children:"outside"})," any function. It\u2019s accessible from ",(0,i.jsx)(n.strong,{children:"anywhere"})," in your EasyBite program\u2014both top\u2011level code and inside functions (unless shadowed by a local variable of the same name)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"declare counter\r\nset counter to 0\r\n\r\nfunction incrementCounter()\r\n    // This refers to the global 'counter'\r\n    set counter to counter + 1\r\nend function\r\n\r\nincrementCounter()\r\nincrementCounter()\r\nshow \"Global counter is: \" + counter   // Displays: Global counter is: 2\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"counter"})," lives in the global scope."]}),"\n",(0,i.jsxs)(n.li,{children:["Every call to ",(0,i.jsx)(n.code,{children:"incrementCounter"})," updates the same ",(0,i.jsx)(n.code,{children:"counter"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"local-function-scope",children:"Local (Function) Scope"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"local"})," variable is declared ",(0,i.jsx)(n.em,{children:"inside"})," a function with ",(0,i.jsx)(n.code,{children:"declare"}),". It exists only while that function runs and is not visible outside."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'function greet(name)\r\n    declare message\r\n    set message to "Hello, " + name\r\n    show message\r\nend function\r\n\r\ngreet("Alice")   // Displays: Hello, Alice\r\nshow message     // Error: \'message\' is undefined outside the function\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"message"})," is local to ",(0,i.jsx)(n.code,{children:"greet"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Attempting to use ",(0,i.jsx)(n.code,{children:"message"})," outside ",(0,i.jsx)(n.code,{children:"greet"})," causes an error."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"block-scope-in-easybite",children:"Block Scope in EasyBite"}),"\n",(0,i.jsxs)(n.p,{children:["Unlike some languages, EasyBite does ",(0,i.jsx)(n.strong,{children:"not"})," create new scope for loops or ",(0,i.jsx)(n.code,{children:"if"})," blocks. Any variable declared inside a loop or conditional is still local to the ",(0,i.jsx)(n.strong,{children:"enclosing function"}),", not to the block."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"function countDown(n)\r\n    declare i\r\n    set i to n\r\n\r\n    repeat while(i > 0)\r\n        declare temp   // temp is in function scope, not loop scope\r\n        set temp to i\r\n        show temp\r\n        set i to i - 1\r\n    end repeat\r\n\r\n    // 'temp' is still accessible here\r\n    show \"Last temp was: \" + temp\r\nend function\r\n\r\ncountDown(3)\r\n// Displays: 3\r\n//           2\r\n//           1\r\n//           Last temp was: 1\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"temp"})," is visible both inside the loop and after it, within ",(0,i.jsx)(n.code,{children:"countDown"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"declaring-variables",children:"Declaring Variables"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Global"}),": use ",(0,i.jsx)(n.code,{children:"declare"})," at the top level."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Local"}),": use ",(0,i.jsx)(n.code,{children:"declare"})," inside a function."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Assigning"}),": use ",(0,i.jsx)(n.code,{children:"set \u2026 to"})," for all initializations and updates."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'// Global declaration\r\ndeclare totalSales\r\nset totalSales to 0\r\n\r\nfunction recordSale(amount)\r\n    // Local declaration\r\n    declare saleMessage\r\n    set totalSales to totalSales + amount\r\n    set saleMessage to "Recorded: " + amount\r\n    show saleMessage\r\nend function\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["You must ",(0,i.jsx)(n.code,{children:"declare"})," each variable before using it."]}),"\n",(0,i.jsxs)(n.li,{children:["Trying to ",(0,i.jsx)(n.code,{children:"set"})," an undeclared variable causes an error."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"examples-of-scope",children:"Examples of Scope"}),"\n",(0,i.jsx)(n.h3,{id:"example1-global-vs-local",children:"Example\xa01: Global vs Local"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'declare value\r\nset value to 10\r\n\r\nfunction testScope()\r\n    declare value\r\n    set value to 20\r\n    show "Inside function, value = " + value\r\nend function\r\n\r\ntestScope()             // Inside function, value = 20\r\nshow "Outside, value = " + value   // Outside, value = 10\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"value"})," inside ",(0,i.jsx)(n.code,{children:"testScope"})," is a different variable than the global ",(0,i.jsx)(n.code,{children:"value"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"example2-shadowing-variables",children:"Example\xa02: Shadowing Variables"}),"\n",(0,i.jsxs)(n.p,{children:["When a local variable shares the same name as a global, the local ",(0,i.jsx)(n.strong,{children:"shadows"})," or ",(0,i.jsx)(n.strong,{children:"override"})," or ",(0,i.jsx)(n.strong,{children:"replace"})," the global inside its function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'declare userName\r\nset userName to "GlobalUser"\r\n\r\nfunction printLocal()\r\n    declare userName\r\n    set userName to "LocalUser"\r\n    show "Local userName: " + userName\r\nend function\r\n\r\nprintLocal()                    // Local userName: LocalUser\r\nshow "Global userName: " + userName   // Global userName: GlobalUser\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Shadowing is intentional but use sparingly to avoid confusion."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"example3-loops--conditionals",children:"Example\xa03: Loops & Conditionals"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"function findMax(numbers)\r\n    declare max\r\n    set max to numbers[1]\r\n\r\n    repeat while(index <= numbers.length())\r\n        if numbers[index] > max\r\n            set max to numbers[index]\r\n        end if\r\n        set index to index + 1\r\n    end repeat\r\n\r\n    return max\r\nend function\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max"})," and ",(0,i.jsx)(n.code,{children:"index"})," are both local to ",(0,i.jsx)(n.code,{children:"findMax"}),", even though ",(0,i.jsx)(n.code,{children:"index"})," was not declared inside the loop or ",(0,i.jsx)(n.code,{children:"if"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls--how-to-avoid-them",children:"Common Pitfalls & How to Avoid Them"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Pitfall"}),(0,i.jsx)(n.th,{children:"Symptom"}),(0,i.jsx)(n.th,{children:"Fix"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Using undeclared variables"}),(0,i.jsx)(n.td,{children:"Runtime error: variable undefined"}),(0,i.jsxs)(n.td,{children:["Always ",(0,i.jsx)(n.code,{children:"declare"})," before ",(0,i.jsx)(n.code,{children:"set"})," or use."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Relying on block scope"}),(0,i.jsx)(n.td,{children:"Variables bleed outside blocks"}),(0,i.jsxs)(n.td,{children:["Remember: loops/",(0,i.jsx)(n.code,{children:"if"}),"s don\u2019t create new scope."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Shadowing unintentionally"}),(0,i.jsx)(n.td,{children:"Hard\u2011to\u2011trace bugs"}),(0,i.jsx)(n.td,{children:"Use unique names or avoid reusing global names locally."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Modifying globals unexpectedly"}),(0,i.jsx)(n.td,{children:"Functions have side effects"}),(0,i.jsx)(n.td,{children:"Pass values as parameters and return results instead."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimize globals"}),": Excessive globals make code hard to reason about."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prefer locals"}),": Local variables reduce side effects and improve modularity."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use clear names"}),": ",(0,i.jsx)(n.code,{children:"totalCount"})," vs. ",(0,i.jsx)(n.code,{children:"count"})," helps differentiate scopes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Declare early"}),": Place all ",(0,i.jsx)(n.code,{children:"declare"})," statements at the top of your function."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document side effects"}),": If a function changes globals, note it in comments."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Variable scope in EasyBite is straightforward:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Global"}),": declared outside functions, accessible everywhere."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Local"}),": declared inside functions, accessible only there."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No block scope"}),": loops and conditionals share their function\u2019s scope."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By mastering scope, you\u2019ll write safer, more maintainable code\u2014avoiding name clashes and unintended side effects. Practice by refactoring code: convert globals to locals where possible, track where variables are used, and keep your EasyBite projects clean and bug\u2011free!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var l=s(6540);const i={},r=l.createContext(i);function o(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);