"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[6082],{7224:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"oop/oop-facts","title":"OOP Frequently Asked Questions (FAQ)","description":"What is OOP?","source":"@site/docs/oop/oop-facts.md","sourceDirName":"oop","slug":"/oop/oop-facts","permalink":"/oop/oop-facts","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/oop/oop-facts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Class Relationships","permalink":"/oop/class-relationships"},"next":{"title":"Libraries in EasyBite","permalink":"/libraries/introduction"}}');var r=s(4848),i=s(8453);const a={},o="OOP Frequently Asked Questions (FAQ)",d={},c=[{value:"What is OOP?",id:"what-is-oop",level:2},{value:"What is a class?",id:"what-is-a-class",level:2},{value:"What is an object?",id:"what-is-an-object",level:2},{value:"Output",id:"output",level:3},{value:"What is a method?",id:"what-is-a-method",level:2},{value:"Output",id:"output-1",level:3},{value:"What is a constructor?",id:"what-is-a-constructor",level:2},{value:"Output",id:"output-2",level:3},{value:"What are access modifiers?",id:"what-are-access-modifiers",level:2},{value:"What is inheritance?",id:"what-is-inheritance",level:2},{value:"Output",id:"output-3",level:3},{value:"What is encapsulation?",id:"what-is-encapsulation",level:2},{value:"What is abstraction?",id:"what-is-abstraction",level:2},{value:"What is polymorphism?",id:"what-is-polymorphism",level:2},{value:"Output",id:"output-4",level:3},{value:"What is the difference between inheritance and composition?",id:"what-is-the-difference-between-inheritance-and-composition",level:2},{value:"Output",id:"output-5",level:3},{value:"Are setter and getter functions built-in?",id:"are-setter-and-getter-functions-built-in",level:2},{value:"Output",id:"output-6",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"oop-frequently-asked-questions-faq",children:"OOP Frequently Asked Questions (FAQ)"})}),"\n",(0,r.jsx)(n.h2,{id:"what-is-oop",children:"What is OOP?"}),"\n",(0,r.jsxs)(n.p,{children:["OOP stands for ",(0,r.jsx)(n.strong,{children:"Object-Oriented Programming"}),". It is a way of writing and organizing code that is inspired by real-world objects. In OOP, we use ",(0,r.jsx)(n.strong,{children:"classes"})," to define how objects should behave, and we create ",(0,r.jsx)(n.strong,{children:"objects"})," as instances of those classes."]}),"\n",(0,r.jsx)(n.p,{children:"OOP is used to structure software in a clear, reusable, and scalable way. It makes it easier to model complex things, organize related behavior and data together, and build programs that are easier to understand and maintain."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-a-class",children:"What is a class?"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"class"})," is a blueprint or template for creating objects. It defines the ",(0,r.jsx)(n.strong,{children:"attributes"})," (data) and ",(0,r.jsx)(n.strong,{children:"methods"})," (functions) that the objects created from the class will have."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Person\r\n    method greet()\r\n        show "Hello!"\r\n    end method\r\nend class\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, ",(0,r.jsx)(n.code,{children:"Person"})," is a class. It has one method called ",(0,r.jsx)(n.code,{children:"greet"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-an-object",children:"What is an object?"}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.strong,{children:"object"})," is a real-world instance of a class. You create an object using the ",(0,r.jsx)(n.code,{children:"new"})," keyword."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"p to new Person()\r\np.greet()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Hello!\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-a-method",children:"What is a method?"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"method"})," is a function defined inside a class. Methods define the behavior of the object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Calculator\r\n    method add(a, b)\r\n        show a + b\r\n    end method\r\nend class\r\n\r\nc to new Calculator()\r\nc.add(5, 7)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"output-1",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"12\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-a-constructor",children:"What is a constructor?"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"constructor"})," is a special method named ",(0,r.jsx)(n.code,{children:"init"}),". It is automatically called when an object is created using the ",(0,r.jsx)(n.code,{children:"new"})," keyword. It is used to set up or initialize the object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Person\r\n    declare name\r\n\r\n    init(name)\r\n        this.name to name\r\n    end init\r\n\r\n    method greet()\r\n        show "Hello " + this.name\r\n    end method\r\nend class\r\n\r\np to new Person("Jane")\r\np.greet()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-2",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Hello Jane\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-are-access-modifiers",children:"What are access modifiers?"}),"\n",(0,r.jsx)(n.p,{children:"Access modifiers define who can access certain parts of a class. In EasyBite:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"secret"})," to make an attribute or method ",(0,r.jsx)(n.strong,{children:"private"}),", meaning it can only be accessed inside the class."]}),"\n",(0,r.jsxs)(n.li,{children:["If you don\u2019t use ",(0,r.jsx)(n.code,{children:"secret"}),", then it is ",(0,r.jsx)(n.strong,{children:"public"})," by default and can be accessed from outside."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Data\r\n    secret declare hidden\r\n    declare visible\r\n\r\n    init()\r\n        this.hidden to 42\r\n        this.visible to 100\r\n    end init\r\n\r\n    method showdata()\r\n        show this.visible\r\n    end method\r\nend class\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-inheritance",children:"What is inheritance?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Inheritance"})," allows one class to reuse the behavior and attributes of another class. You use the ",(0,r.jsx)(n.code,{children:"inherit"})," keyword for this in EasyBite."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Animal\r\n    method sound()\r\n        show "Some sound"\r\n    end method\r\nend class\r\n\r\nclass Dog inherit Animal\r\n    method sound()\r\n        show "Bark"\r\n    end method\r\nend class\r\n\r\nd to new Dog()\r\nd.sound()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-3",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Bark\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can also call the parent's method using ",(0,r.jsx)(n.code,{children:"parent.methodname()"})," or call the parent's constructor using ",(0,r.jsx)(n.code,{children:"parent.init()"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-encapsulation",children:"What is encapsulation?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Encapsulation"})," means bundling the data (attributes) and behavior (methods) together in a class and restricting access to the internal state. This is done using the ",(0,r.jsx)(n.code,{children:"secret"})," keyword to protect data from outside interference."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-abstraction",children:"What is abstraction?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Abstraction"})," means focusing on the essential features while hiding complex internal details. For example, you can create a ",(0,r.jsx)(n.code,{children:"Car"})," class that has a ",(0,r.jsx)(n.code,{children:"drive"})," method without needing to show how the engine works internally."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-polymorphism",children:"What is polymorphism?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Polymorphism"})," allows different classes to implement the same method in different ways."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Animal\r\n    method speak()\r\n        show "Animal sound"\r\n    end method\r\nend class\r\n\r\nclass Cat inherit Animal\r\n    method speak()\r\n        show "Meow"\r\n    end method\r\nend class\r\n\r\nclass Cow inherit Animal\r\n    method speak()\r\n        show "Moo"\r\n    end method\r\nend class\r\n\r\nset animals to [new Cat(), new Cow()]\r\n\r\nforeach a in animals\r\n    a.speak()\r\nend foreach\r\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-4",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Meow\r\nMoo\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-the-difference-between-inheritance-and-composition",children:"What is the difference between inheritance and composition?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Inheritance"}),": One class extends another using ",(0,r.jsx)(n.code,{children:"inherit"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Composition"}),": A class includes another class as part of its structure."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example of composition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Engine\r\n    method start()\r\n        show "Engine starts"\r\n    end method\r\nend class\r\n\r\nclass Car\r\n    declare engine\r\n\r\n    init(engine)\r\n        this.engine to engine\r\n    end init\r\n\r\n    method drive()\r\n        engine.start()\r\n    end method\r\nend class\r\n\r\nset e to new Engine()\r\nset c to new Car(e)\r\nc.drive()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-5",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Engine starts\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"are-setter-and-getter-functions-built-in",children:"Are setter and getter functions built-in?"}),"\n",(0,r.jsx)(n.p,{children:"No. Just like in Java, EasyBite does not have built-in getter or setter functions. Instead, you create them manually using methods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Book\r\n    secret declare title\r\n\r\n    method settitle(t)\r\n        this.title to t\r\n    end method\r\n\r\n    method gettitle()\r\n        show this.title\r\n    end method\r\nend class\r\n\r\nb to new Book()\r\nb.settitle("My Book")\r\nb.gettitle()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-6",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"My Book\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);