"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[1573],{5869:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"syntax/list","title":"Lists","description":"A list, also known as an array, is a collection of multiple values stored in a single variable. It is one of the most useful structures in programming, allowing you to store, access, update, and manipulate a group of data efficiently.","source":"@site/docs/syntax/list.md","sourceDirName":"syntax","slug":"/syntax/list","permalink":"/syntax/list","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/syntax/list.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Loops","permalink":"/syntax/loops"},"next":{"title":"Dictionaries","permalink":"/syntax/dictionary"}}');var r=s(4848),t=s(8453);const l={},d="Lists",a={},o=[{value:"Methods to Access Array Functions",id:"methods-to-access-array-functions",level:2},{value:"Why Use Lists?",id:"why-use-lists",level:2},{value:"Declaring and Initializing a List",id:"declaring-and-initializing-a-list",level:2},{value:"Accessing List Elements",id:"accessing-list-elements",level:2},{value:"Accessing Nested Arrays Without a Loop",id:"accessing-nested-arrays-without-a-loop",level:2},{value:"Getting the Length of a List",id:"getting-the-length-of-a-list",level:2},{value:"Looping Through Lists",id:"looping-through-lists",level:2},{value:"Foreach Loop \u2013 Best for Reading",id:"foreach-loop--best-for-reading",level:3},{value:"For Loop \u2013 Best for Indexing",id:"for-loop--best-for-indexing",level:3},{value:"Modifying Lists with Imported Functions",id:"modifying-lists-with-imported-functions",level:2},{value:"Updating a List Item by Index",id:"updating-a-list-item-by-index",level:2},{value:"Nested Lists (2D Arrays) Example",id:"nested-lists-2d-arrays-example",level:2},{value:"Summary Table of List Features",id:"summary-table-of-list-features",level:2},{value:"More Array Functions",id:"more-array-functions",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"lists",children:"Lists"})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"list"}),", also known as an ",(0,r.jsx)(n.strong,{children:"array"}),", is a collection of multiple values stored in a single variable. It is one of the most useful structures in programming, allowing you to store, access, update, and manipulate a group of data efficiently."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"methods-to-access-array-functions",children:"Methods to Access Array Functions"}),"\n",(0,r.jsx)(n.p,{children:"There are three main ways to perform operations on lists in EasyBite:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"S/N"}),(0,r.jsx)(n.th,{children:"Access Type"}),(0,r.jsx)(n.th,{children:"Example"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Dot Notation"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"items.length()"})}),(0,r.jsx)(n.td,{children:"Access built-in functions directly from the list variable"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"2"}),(0,r.jsx)(n.td,{children:"Module-Based"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'array.remove(items, "apple")'})}),(0,r.jsxs)(n.td,{children:["Use functions through the full ",(0,r.jsx)(n.code,{children:"array"})," module"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"Shorthand Import (Preferred)"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"import remove, append from array"})," then ",(0,r.jsx)(n.code,{children:'remove(items, "apple")'})]}),(0,r.jsx)(n.td,{children:"Import only the specific functions you want to use"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"why-use-lists",children:"Why Use Lists?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Store multiple values under one name"}),"\n",(0,r.jsx)(n.li,{children:"Access items by position"}),"\n",(0,r.jsx)(n.li,{children:"Perform batch operations easily (like looping)"}),"\n",(0,r.jsx)(n.li,{children:"Useful for working with tables, forms, data, and more"}),"\n",(0,r.jsx)(n.li,{children:"Supports any type of data, including mixed types"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"declaring-and-initializing-a-list",children:"Declaring and Initializing a List"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'declare mixed[]\r\nset mixed to ["Ali", 21, true, 99.5]\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"declare mixed[]"}),": Creates an empty list named ",(0,r.jsx)(n.code,{children:"mixed"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"set mixed to [...]"}),": Initializes it with values of different types",(0,r.jsx)(n.br,{}),"\n","You can store strings, numbers, booleans, or any combination."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"accessing-list-elements",children:"Accessing List Elements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'show(mixed[0])        // "Ali"\r\nshow(mixed[1])        // 21\r\nshow(mixed[2])        // true\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Lists are zero-indexed, meaning the first item is at position ",(0,r.jsx)(n.code,{children:"0"})]}),"\n",(0,r.jsx)(n.li,{children:"You can access any element using its index inside square brackets"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"accessing-nested-arrays-without-a-loop",children:"Accessing Nested Arrays Without a Loop"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"declare matrix[]\r\nset matrix to [[1, 2], [3, 4], [5, 6]]\r\n\r\nshow(matrix[0][1])    // 2\r\nshow(matrix[2][0])    // 5\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You can store arrays inside arrays (2D structure)"}),"\n",(0,r.jsx)(n.li,{children:"Use double index to get specific rows and columns like a table"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"getting-the-length-of-a-list",children:"Getting the Length of a List"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'declare names[]\r\nset names to ["Ali", "Fatima", "Zainab"]\r\n\r\n// Method 1: Dot Notation\r\nshow(names.length())\r\n\r\n// Method 2: Import length function\r\nimport length from array\r\nshow(length(names))\r\n\r\n// Method 3: Full array module\r\nimport array\r\nshow(array.length(names))\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:".length()"})," or the ",(0,r.jsx)(n.code,{children:"length()"})," function to count items in a list"]}),"\n",(0,r.jsx)(n.li,{children:"Works with both built-in and imported function formats"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"looping-through-lists",children:"Looping Through Lists"}),"\n",(0,r.jsx)(n.h3,{id:"foreach-loop--best-for-reading",children:"Foreach Loop \u2013 Best for Reading"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"foreach name in names\r\n    show(name)\r\nend foreach\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Loops through each value one by one"}),"\n",(0,r.jsx)(n.li,{children:"Best when you only need the value, not the index"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"for-loop--best-for-indexing",children:"For Loop \u2013 Best for Indexing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"for i from 0 to names.length() - 1\r\n    show(names[i])\r\nend for\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Loops using index numbers"}),"\n",(0,r.jsx)(n.li,{children:"Useful when you want to modify values or use the position"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"modifying-lists-with-imported-functions",children:"Modifying Lists with Imported Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'import remove, append from array\r\n\r\ndeclare fruits[]\r\nset fruits to ["apple", "banana", "mango"]\r\n\r\nappend(fruits, "grape")        // Adds at the end\r\nremove(fruits, "banana")       // Removes "banana"\r\n\r\nshow(fruits)                   // ["apple", "mango", "grape"]\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"append()"})," adds an item at the end"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"remove()"})," deletes the item (first match only)"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"updating-a-list-item-by-index",children:"Updating a List Item by Index"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'set fruits[0] to "orange"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You can directly change any item by referring to its position"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"nested-lists-2d-arrays-example",children:"Nested Lists (2D Arrays) Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'declare grid[]\r\nset grid to [["math", 90], ["science", 85]]\r\n\r\nforeach row in grid\r\n    show(row[0] + ": " + row[1])\r\nend foreach\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This simulates rows of data (like subject and score)"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"row[0]"})," is subject, ",(0,r.jsx)(n.code,{children:"row[1]"})," is score"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary-table-of-list-features",children:"Summary Table of List Features"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"Syntax Example"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Declare list"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"declare scores[]"})}),(0,r.jsx)(n.td,{children:"Define an empty list"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Initialize list"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"set scores to [80, 85, 90]"})}),(0,r.jsx)(n.td,{children:"Add values at once"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Mixed data list"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'["Ali", 22, true]'})}),(0,r.jsx)(n.td,{children:"Store different types in one array"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Get length"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"scores.length()"})," / ",(0,r.jsx)(n.code,{children:"length(scores)"})]}),(0,r.jsx)(n.td,{children:"Find how many items in the list"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Access nested index"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"matrix[1][0]"})}),(0,r.jsx)(n.td,{children:"Get value from sub-list"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Update value"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'set names[1] to "Amina"'})}),(0,r.jsx)(n.td,{children:"Replace an item at specific index"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Loop (foreach)"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"foreach x in items ... end foreach"})}),(0,r.jsx)(n.td,{children:"Read values directly"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Loop (for)"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"for i from 0 to arr.length()-1 ..."})}),(0,r.jsx)(n.td,{children:"Use index-based loop"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Import functions"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"import remove, append from array"})}),(0,r.jsx)(n.td,{children:"Import just what you need"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Use full module"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"array.append(arr, value)"})}),(0,r.jsx)(n.td,{children:"Call via full module"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"more-array-functions",children:"More Array Functions"}),"\n",(0,r.jsx)(n.p,{children:"You can do much more with lists using other available functions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"insert(arr, index, value)"})," \u2013 Add at specific index"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"contains(arr, value)"})," \u2013 Check if value exists"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"index_of(arr, value)"})," \u2013 Get index of item"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"clear(arr)"})," \u2013 Remove all items"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"reverse(arr)"})," \u2013 Flip the list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sort(arr)"})," \u2013 Arrange in order"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Visit the full documentation:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"/libraries/array",children:"Array Module Reference"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Lists in EasyBite give you the power to manage data efficiently. Whether you're dealing with simple names or complex grids, arrays are the foundation of data handling and looping. Practice with small lists first, then try nesting, importing functions, and building real apps with them."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);