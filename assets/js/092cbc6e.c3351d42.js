"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[1437],{5212:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"syntax/dictionary","title":"Dictionaries","description":"A dictionary in EasyBite is a collection of key-value pairs, where each key maps to a corresponding value. Dictionaries are also referred to as associative arrays or hashmaps in some other programming languages.","source":"@site/docs/syntax/dictionary.md","sourceDirName":"syntax","slug":"/syntax/dictionary","permalink":"/syntax/dictionary","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/syntax/dictionary.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Lists","permalink":"/syntax/list"},"next":{"title":"Error Handling in EasyBite","permalink":"/syntax/error-handling"}}');var t=i(4848),r=i(8453);const c={},a="Dictionaries",o={},d=[{value:"Why Use Dictionaries?",id:"why-use-dictionaries",level:2},{value:"Declaring and Initializing a Dictionary",id:"declaring-and-initializing-a-dictionary",level:2},{value:"Example:",id:"example",level:3},{value:"Accessing Dictionary Elements",id:"accessing-dictionary-elements",level:2},{value:"Example:",id:"example-1",level:3},{value:"Three Ways to Access Dictionary Functions",id:"three-ways-to-access-dictionary-functions",level:2},{value:"<strong>1. Using Dot Notation</strong>",id:"1-using-dot-notation",level:3},{value:"Example:",id:"example-2",level:4},{value:"<strong>2. Using Module Access</strong>",id:"2-using-module-access",level:3},{value:"Example:",id:"example-3",level:4},{value:"<strong>3. Using Function Import (Preferred for Specific Operations)</strong>",id:"3-using-function-import-preferred-for-specific-operations",level:3},{value:"Example:",id:"example-4",level:4},{value:"Accessing Dictionary Keys, Values, and Items",id:"accessing-dictionary-keys-values-and-items",level:2},{value:"Example:",id:"example-5",level:3},{value:"Modifying Dictionary Items",id:"modifying-dictionary-items",level:2},{value:"Example - Adding or Updating Items:",id:"example---adding-or-updating-items",level:3},{value:"Example - Removing Items:",id:"example---removing-items",level:3},{value:"Checking if a Key or Value Exists in a Dictionary",id:"checking-if-a-key-or-value-exists-in-a-dictionary",level:2},{value:"Example:",id:"example-6",level:3},{value:"Summary of Dictionary Functions",id:"summary-of-dictionary-functions",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"dictionaries",children:"Dictionaries"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"dictionary"})," in ",(0,t.jsx)(n.strong,{children:"EasyBite"})," is a collection of key-value pairs, where each key maps to a corresponding value. Dictionaries are also referred to as ",(0,t.jsx)(n.strong,{children:"associative arrays"})," or ",(0,t.jsx)(n.strong,{children:"hashmaps"})," in some other programming languages."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"why-use-dictionaries",children:"Why Use Dictionaries?"}),"\n",(0,t.jsxs)(n.p,{children:["Dictionaries are used when you need to store and retrieve data using a unique identifier (the ",(0,t.jsx)(n.strong,{children:"key"}),") rather than by index (as in lists). This is particularly useful in scenarios like:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mapping data"}),": For instance, storing a person's name and age, where the name is the key and the age is the value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Efficient lookups"}),": Finding values based on keys is very fast and efficient."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexibility"}),": You can use any ",(0,t.jsx)(n.strong,{children:"immutable type"})," as the key (like strings, numbers, or tuples) and store any type of data as the value (strings, lists, etc.)."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"declaring-and-initializing-a-dictionary",children:"Declaring and Initializing a Dictionary"}),"\n",(0,t.jsxs)(n.p,{children:["Dictionaries in EasyBite do not support declaration in the traditional sense. Instead, you initialize an empty dictionary by setting a variable to ",(0,t.jsx)(n.code,{children:"{}"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'set person to {}\r\nset person to {"name": "Ali", "age": 25, "city": "Lagos"}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The variable ",(0,t.jsx)(n.code,{children:"person"})," is initialized as an empty dictionary using ",(0,t.jsx)(n.code,{children:"{}"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Later, it is populated with three key-value pairs: ",(0,t.jsx)(n.code,{children:'"name"'}),", ",(0,t.jsx)(n.code,{children:'"age"'}),", and ",(0,t.jsx)(n.code,{children:'"city"'}),", with corresponding values ",(0,t.jsx)(n.code,{children:'"Ali"'}),", ",(0,t.jsx)(n.code,{children:"25"}),", and ",(0,t.jsx)(n.code,{children:'"Lagos"'}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"accessing-dictionary-elements",children:"Accessing Dictionary Elements"}),"\n",(0,t.jsxs)(n.p,{children:["You can access dictionary values by specifying the key inside square brackets ",(0,t.jsx)(n.code,{children:"[]"})," or by using dot notation if the key is valid."]}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'show(person["name"])    // "Ali"\r\nshow(person.age)        // 25\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'person["name"]'})," accesses the value associated with the key ",(0,t.jsx)(n.code,{children:'"name"'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"person.age"})," uses ",(0,t.jsx)(n.strong,{children:"dot notation"})," to access the value associated with the key ",(0,t.jsx)(n.code,{children:'"age"'}),". Dot notation is supported for keys that are valid identifiers (such as letters, numbers, or underscores)."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"three-ways-to-access-dictionary-functions",children:"Three Ways to Access Dictionary Functions"}),"\n",(0,t.jsxs)(n.p,{children:["Dictionaries in EasyBite support ",(0,t.jsx)(n.strong,{children:"three methods"})," to access their functions. These methods provide flexibility depending on the situation and your coding preferences."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Access Method"}),(0,t.jsx)(n.th,{children:"Example Syntax"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"1. Using Dot Notation"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'person.containskey("name")'})}),(0,t.jsxs)(n.td,{children:["Accessing dictionary functions using dot notation, which works for methods that are part of the dictionary object (e.g., ",(0,t.jsx)(n.code,{children:"containskey"}),")."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"2. Using Module Access"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'dict.containskey(person, "name")'})}),(0,t.jsxs)(n.td,{children:["Using the dictionary module (e.g., ",(0,t.jsx)(n.code,{children:"dict.containskey"}),") after importing the module."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"3. Using Function Import"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"import containskey from dict"}),(0,t.jsx)("br",{}),(0,t.jsx)(n.code,{children:'containskey(person, "name")'})]}),(0,t.jsxs)(n.td,{children:["Importing specific dictionary functions for use (like ",(0,t.jsx)(n.code,{children:"containskey"})," or ",(0,t.jsx)(n.code,{children:"values"}),") for more granular control."]})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"1-using-dot-notation",children:(0,t.jsx)(n.strong,{children:"1. Using Dot Notation"})}),"\n",(0,t.jsx)(n.p,{children:"You can access dictionary functions directly using dot notation, similar to how you access properties of an object. This works for methods that belong to the dictionary object."}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'set hasKey to person.containskey("name")  // Checks if the key "name" exists in the dictionary.\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"containskey"})," function checks if the dictionary contains the specified key. Here, we are using dot notation to access the function directly on the ",(0,t.jsx)(n.code,{children:"person"})," dictionary."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"2-using-module-access",children:(0,t.jsx)(n.strong,{children:"2. Using Module Access"})}),"\n",(0,t.jsxs)(n.p,{children:["In this method, you import the ",(0,t.jsx)(n.code,{children:"dict"})," module and access dictionary functions using the module name. This is useful when you want to access a wider range of dictionary functions."]}),"\n",(0,t.jsx)(n.h4,{id:"example-3",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'import dict\r\nset hasKey to dict.containskey(person, "name")  // Checks if the key "name" exists in the dictionary.\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["We import the ",(0,t.jsx)(n.code,{children:"dict"})," module and use it to call the ",(0,t.jsx)(n.code,{children:"containskey"})," function. This method gives you access to all dictionary-related functions available in the module."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"3-using-function-import-preferred-for-specific-operations",children:(0,t.jsx)(n.strong,{children:"3. Using Function Import (Preferred for Specific Operations)"})}),"\n",(0,t.jsx)(n.p,{children:"This method imports specific functions, allowing you to use only the functions you need. It makes your code more modular and reduces unnecessary imports."}),"\n",(0,t.jsx)(n.h4,{id:"example-4",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'import containskey from dict\r\nset hasKey to containskey(person, "name")  // Checks if the key "name" exists in the dictionary.\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["We import the ",(0,t.jsx)(n.code,{children:"containskey"})," function directly from the ",(0,t.jsx)(n.code,{children:"dict"})," module. This is efficient when you need to use specific functions and want to avoid importing unnecessary code."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"accessing-dictionary-keys-values-and-items",children:"Accessing Dictionary Keys, Values, and Items"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keys"}),": You can access all keys in a dictionary using the ",(0,t.jsx)(n.code,{children:"keys()"})," function."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Values"}),": Use the ",(0,t.jsx)(n.code,{children:"values()"})," function to get all values in the dictionary."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Items"}),": Use the ",(0,t.jsx)(n.code,{children:"items()"})," function to get both keys and values."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-5",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'import keys, values, items from dict\r\n\r\nset keysList to keys(person)        // Returns a list of keys: ["name", "age", "city"]\r\nset valuesList to values(person)    // Returns a list of values: ["Ali", 25, "Lagos"]\r\nset itemsList to items(person)      // Returns a list of key-value pairs: [("name", "Ali"), ("age", 25), ("city", "Lagos")]\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"modifying-dictionary-items",children:"Modifying Dictionary Items"}),"\n",(0,t.jsx)(n.p,{children:"You can add, update, or delete key-value pairs in a dictionary."}),"\n",(0,t.jsx)(n.h3,{id:"example---adding-or-updating-items",children:"Example - Adding or Updating Items:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'set person["occupation"] to "Software Developer"  // Adds a new key-value pair\r\nset person.age to 26  // Updates the value associated with the "age" key\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example---removing-items",children:"Example - Removing Items:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'import remove from dict\r\nremove(person, "city")  // Removes the key "city" from the dictionary\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'person["occupation"]'})," adds a new key-value pair."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'remove(person, "city")'})," removes the ",(0,t.jsx)(n.code,{children:'"city"'})," key from the dictionary."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"checking-if-a-key-or-value-exists-in-a-dictionary",children:"Checking if a Key or Value Exists in a Dictionary"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Checking Keys"}),": Use the ",(0,t.jsx)(n.code,{children:"containskey"})," function to check if a dictionary contains a specific key."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Checking Values"}),": Use the ",(0,t.jsx)(n.code,{children:"containsvalue"})," function to check if a dictionary contains a specific value."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-6",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'set hasKey to containskey(person, "age")  // Returns true\r\nset hasValue to containsvalue(person, 25) // Returns true\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"summary-of-dictionary-functions",children:"Summary of Dictionary Functions"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Function Name"}),(0,t.jsx)(n.th,{children:"Example Syntax"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"containskey"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'containskey(person, "name")'})}),(0,t.jsx)(n.td,{children:"Checks if the dictionary contains the specified key."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"containsvalue"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'containsvalue(person, "Ali")'})}),(0,t.jsx)(n.td,{children:"Checks if the dictionary contains the specified value."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"keys"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"keys(person)"})}),(0,t.jsx)(n.td,{children:"Returns a list of all the keys in the dictionary."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"values"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"values(person)"})}),(0,t.jsx)(n.td,{children:"Returns a list of all the values in the dictionary."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"items"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"items(person)"})}),(0,t.jsx)(n.td,{children:"Returns a list of key-value pairs in the dictionary."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"remove"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'remove(person, "age")'})}),(0,t.jsx)(n.td,{children:"Removes a key-value pair from the dictionary."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"length"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"length(person)"})}),(0,t.jsx)(n.td,{children:"Returns the number of key-value pairs in the dictionary."})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["Dictionaries are a powerful and flexible data structure that allows you to store and retrieve data efficiently using ",(0,t.jsx)(n.strong,{children:"keys"}),". By understanding how to access dictionary functions, modify items, and perform common operations like checking for keys and values, you can work with data in a more organized and efficient way."]}),"\n",(0,t.jsx)(n.p,{children:"With EasyBite's built-in dictionary functions, you can easily implement logic that involves mapping and associating data with meaningful identifiers, making your programs more dynamic and scalable."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>a});var s=i(6540);const t={},r=s.createContext(t);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);