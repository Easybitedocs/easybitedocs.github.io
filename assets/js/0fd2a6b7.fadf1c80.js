"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[7011],{2006:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"functions/naming-convension","title":"Naming Convention","description":"Naming conventions are a set of rules and guidelines that define how we name elements in a programming language\u2014such as variables, functions, constants, and more. These conventions are not just about style; they help make code more readable, consistent, and understandable, especially when working in teams or writing large programs.","source":"@site/docs/functions/naming-convension.md","sourceDirName":"functions","slug":"/functions/naming-convension","permalink":"/functions/naming-convension","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/functions/naming-convension.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Built\u2011in Functions","permalink":"/functions/builtin-functions"},"next":{"title":"Object\u2011Oriented Programming (OOP)","permalink":"/oop/oop-concept"}}');var a=s(4848),r=s(8453);const l={},t="Naming Convention",o={},d=[{value:"Why Naming Conventions Matter",id:"why-naming-conventions-matter",level:2},{value:"Function Names",id:"function-names",level:2},{value:"Rule: All lowercase, no underscores, no hyphens \u2014 even for multiple words.",id:"rule-all-lowercase-no-underscores-no-hyphens--even-for-multiple-words",level:3},{value:"Good Examples:",id:"good-examples",level:3},{value:"Bad Examples (avoid):",id:"bad-examples-avoid",level:3},{value:"Variable Names",id:"variable-names",level:2},{value:"Rule: Use lowercase, can use underscore if needed for clarity.",id:"rule-use-lowercase-can-use-underscore-if-needed-for-clarity",level:3},{value:"Good Examples:",id:"good-examples-1",level:3},{value:"Bad Examples:",id:"bad-examples",level:3},{value:"Constant Names",id:"constant-names",level:2},{value:"Rule: Use ALL CAPS with underscores to separate words.",id:"rule-use-all-caps-with-underscores-to-separate-words",level:3},{value:"Examples:",id:"examples",level:3},{value:"Avoid:",id:"avoid",level:3},{value:"Library and Module Names",id:"library-and-module-names",level:2},{value:"Example:",id:"example",level:3},{value:"Class and Object Names (if supported)",id:"class-and-object-names-if-supported",level:2},{value:"Summary Table",id:"summary-table",level:2},{value:"Helpful Tips",id:"helpful-tips",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"naming-convention",children:"Naming Convention"})}),"\n",(0,a.jsx)(n.p,{children:"Naming conventions are a set of rules and guidelines that define how we name elements in a programming language\u2014such as variables, functions, constants, and more. These conventions are not just about style; they help make code more readable, consistent, and understandable, especially when working in teams or writing large programs."}),"\n",(0,a.jsx)(n.p,{children:"In EasyBite, naming conventions are clear and specific. In this document, we will explain in great detail how to name your functions, variables, constants, and other identifiers correctly according to EasyBite standards. This explanation is aimed at beginners, so we will go step by step and include many practical examples."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"why-naming-conventions-matter",children:"Why Naming Conventions Matter"}),"\n",(0,a.jsx)(n.p,{children:"Before diving into the actual rules, it\u2019s important to understand why naming conventions matter:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Readability"})," \u2013 A consistent style makes your code easier to follow."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Team Collaboration"})," \u2013 Everyone follows the same rules, so the code feels familiar."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Maintainability"})," \u2013 Clean and predictable names make it easier to debug and extend programs."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Self-Documentation"})," \u2013 A good name tells you what something does without needing comments."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Now, let\u2019s explore the naming rules in EasyBite."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"function-names",children:"Function Names"}),"\n",(0,a.jsx)(n.h3,{id:"rule-all-lowercase-no-underscores-no-hyphens--even-for-multiple-words",children:"Rule: All lowercase, no underscores, no hyphens \u2014 even for multiple words."}),"\n",(0,a.jsx)(n.p,{children:"EasyBite expects function names to be:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Written entirely in lowercase letters."}),"\n",(0,a.jsxs)(n.li,{children:["Do not use underscores (",(0,a.jsx)(n.code,{children:"_"}),") to separate words."]}),"\n",(0,a.jsxs)(n.li,{children:["Do not use camelCase (",(0,a.jsx)(n.code,{children:"calculateArea"}),") or PascalCase (",(0,a.jsx)(n.code,{children:"CalculateArea"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:["Instead, use a flat lowercase structure.",(0,a.jsx)(n.br,{}),"\n","Example: ",(0,a.jsx)(n.code,{children:"calculatearea"})]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"good-examples",children:"Good Examples:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-easybite",children:"function printmessage()\r\nfunction getuserinput()\r\nfunction calculateaverage()\r\nfunction checkvalidemail()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"bad-examples-avoid",children:"Bad Examples (avoid):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-easybite",children:"function print_message()     // uses underscore\r\nfunction getUserInput()      // camelCase\r\nfunction GetUserInput()      // PascalCase\r\nfunction get-user-input()    // hyphens not allowed\n"})}),"\n",(0,a.jsx)(n.p,{children:"This style may feel strange at first, especially if you\u2019re used to camelCase or snake_case, but consistency is key in EasyBite."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"variable-names",children:"Variable Names"}),"\n",(0,a.jsx)(n.p,{children:"For variables, the convention is similar to functions but slightly more flexible."}),"\n",(0,a.jsx)(n.h3,{id:"rule-use-lowercase-can-use-underscore-if-needed-for-clarity",children:"Rule: Use lowercase, can use underscore if needed for clarity."}),"\n",(0,a.jsx)(n.p,{children:"You can name variables using:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["All lowercase (",(0,a.jsx)(n.code,{children:"total"}),", ",(0,a.jsx)(n.code,{children:"index"}),", ",(0,a.jsx)(n.code,{children:"userinput"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:["Lowercase with underscores for readability (",(0,a.jsx)(n.code,{children:"user_input"}),", ",(0,a.jsx)(n.code,{children:"file_path"}),", ",(0,a.jsx)(n.code,{children:"count_total"}),")"]}),"\n",(0,a.jsx)(n.li,{children:"Keep names short but descriptive."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"good-examples-1",children:"Good Examples:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-easybite",children:'set total to 0\r\nset user_input to input("Enter a value: ")\r\nset temperature to 36.5\r\nset is_valid to true\n'})}),"\n",(0,a.jsx)(n.h3,{id:"bad-examples",children:"Bad Examples:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-easybite",children:'set Total to 0              // Starts with uppercase\r\nset userInput to "hi"       // camelCase not recommended\r\nset user-input to "hi"      // Hyphens are invalid\n'})}),"\n",(0,a.jsx)(n.p,{children:"While underscores are allowed for variables, it\u2019s a good idea to use them only when they truly make the name easier to understand."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"constant-names",children:"Constant Names"}),"\n",(0,a.jsx)(n.p,{children:"Constants are values that don\u2019t change during program execution."}),"\n",(0,a.jsx)(n.h3,{id:"rule-use-all-caps-with-underscores-to-separate-words",children:"Rule: Use ALL CAPS with underscores to separate words."}),"\n",(0,a.jsx)(n.p,{children:"This is a common style for constants in many languages, and EasyBite follows it too."}),"\n",(0,a.jsx)(n.h3,{id:"examples",children:"Examples:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-easybite",children:'set PI to 3.14159\r\nset MAX_USERS to 100\r\nset DEFAULT_NAME to "guest"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"avoid",children:"Avoid:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-easybite",children:'set pi to 3.14159              // Looks like a variable\r\nset MaxUsers to 100            // camelCase is incorrect\r\nset default-name to "guest"    // Invalid syntax\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"library-and-module-names",children:"Library and Module Names"}),"\n",(0,a.jsx)(n.p,{children:"When importing libraries, always use lowercase names."}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-easybite",children:"import math\r\nimport string\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you alias a library using ",(0,a.jsx)(n.code,{children:"as"}),", keep it lowercase:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-easybite",children:"import string as str\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"class-and-object-names-if-supported",children:"Class and Object Names (if supported)"}),"\n",(0,a.jsx)(n.p,{children:"EasyBite does not currently emphasize object-oriented structures, but if you define structured types or classes in future versions or extensions, it\u2019s best to use PascalCase:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-easybite",children:"object UserProfile\r\nobject ShoppingCart\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"summary-table",children:"Summary Table"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Type"}),(0,a.jsx)(n.th,{children:"Style"}),(0,a.jsx)(n.th,{children:"Example"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Function"}),(0,a.jsxs)(n.td,{children:["lowercase, no ",(0,a.jsx)(n.code,{children:"_"})]}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"getuserinput()"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Variable"}),(0,a.jsx)(n.td,{children:"lowercase or snake_case"}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"user_input"}),", ",(0,a.jsx)(n.code,{children:"total"})]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Constant"}),(0,a.jsx)(n.td,{children:"UPPER_CASE"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"MAX_USERS"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Library"}),(0,a.jsx)(n.td,{children:"lowercase"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"import math"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Class"}),(0,a.jsx)(n.td,{children:"PascalCase (if used)"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"UserAccount"})})]})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"helpful-tips",children:"Helpful Tips"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Pick meaningful names: ",(0,a.jsx)(n.code,{children:"totalprice"})," is better than ",(0,a.jsx)(n.code,{children:"tp"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"Never use spaces or hyphens: they\u2019re invalid in names."}),"\n",(0,a.jsx)(n.li,{children:"Test your names by reading them aloud\u2014does it sound like what it does?"}),"\n",(0,a.jsx)(n.li,{children:"Stick to the convention 100% of the time\u2014even for practice code."}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"Naming conventions might seem like a small detail, but they make a huge difference in the clarity and quality of your code. EasyBite's naming rules are simple, predictable, and beginner-friendly. Just remember:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Functions: ",(0,a.jsx)(n.code,{children:"lowercasewithnospaces"})]}),"\n",(0,a.jsxs)(n.li,{children:["Variables: ",(0,a.jsx)(n.code,{children:"lowercase_or_with_underscore"})]}),"\n",(0,a.jsxs)(n.li,{children:["Constants: ",(0,a.jsx)(n.code,{children:"ALL_UPPERCASE"})]}),"\n",(0,a.jsx)(n.li,{children:"Avoid camelCase, PascalCase (for functions/variables), and kebab-case"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"By consistently using the correct naming style, your EasyBite programs will be easier to read, share, and grow over time."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>t});var i=s(6540);const a={},r=i.createContext(a);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);