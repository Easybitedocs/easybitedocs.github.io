"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[3033],{2469:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"oop/constructors","title":"Constructors","description":"In Object\u2011Oriented Programming (OOP), a constructor is a special method that runs automatically when you create a new object. It allows you to set up the object\u2019s initial state\u2014assigning values to attributes, allocating resources, or performing any startup logic. In EasyBite, constructors are defined with the init keyword and closed with end init. This document provides a very detailed, step\u2011by\u2011step guide to constructors in EasyBite, with simple explanations, numerous examples, and clear outputs so that even complete beginners can follow along.","source":"@site/docs/oop/constructors.md","sourceDirName":"oop","slug":"/oop/constructors","permalink":"/oop/constructors","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/oop/constructors.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Methods","permalink":"/oop/methods"},"next":{"title":"Access Modifiers","permalink":"/oop/access-modifiers"}}');var r=t(4848),i=t(8453);const c={},o="Constructors",a={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What Is a Constructor?",id:"what-is-a-constructor",level:2},{value:"Why Use a Constructor?",id:"why-use-a-constructor",level:2},{value:"Constructor Syntax in EasyBite",id:"constructor-syntax-in-easybite",level:2},{value:"Basic Example: No\u2011Argument Constructor",id:"basic-example-noargument-constructor",level:2},{value:"Parameterized Constructor",id:"parameterized-constructor",level:2},{value:"Using <code>this</code> in Constructors",id:"using-this-in-constructors",level:2},{value:"Constructor with Default Values",id:"constructor-with-default-values",level:2},{value:"Constructor and Inheritance",id:"constructor-and-inheritance",level:2},{value:"Order of Execution",id:"order-of-execution",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Detailed Examples with Outputs",id:"detailed-examples-with-outputs",level:2},{value:"Example 1: Bank Account Initialization",id:"example-1-bank-account-initialization",level:3},{value:"Example 2: Configuration Loader",id:"example-2-configuration-loader",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"constructors",children:"Constructors"})}),"\n",(0,r.jsxs)(n.p,{children:["In Object\u2011Oriented Programming (OOP), a ",(0,r.jsx)(n.strong,{children:"constructor"})," is a special method that runs automatically when you create a new object. It allows you to set up the object\u2019s initial state\u2014assigning values to attributes, allocating resources, or performing any startup logic. In EasyBite, constructors are defined with the ",(0,r.jsx)(n.code,{children:"init"})," keyword and closed with ",(0,r.jsx)(n.code,{children:"end init"}),". This document provides a ",(0,r.jsx)(n.strong,{children:"very detailed"}),", ",(0,r.jsx)(n.strong,{children:"step\u2011by\u2011step"})," guide to constructors in EasyBite, with simple explanations, numerous examples, and clear outputs so that even complete beginners can follow along."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#constructors",children:"Constructors"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#table-of-contents",children:"Table of Contents"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#what-is-a-constructor",children:"What Is a Constructor?"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#why-use-a-constructor",children:"Why Use a Constructor?"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#constructor-syntax-in-easybite",children:"Constructor Syntax in EasyBite"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#basic-example-noargument-constructor",children:"Basic Example: No\u2011Argument Constructor"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#parameterized-constructor",children:"Parameterized Constructor"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#using-this-in-constructors",children:["Using ",(0,r.jsx)(n.code,{children:"this"})," in Constructors"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#constructor-with-default-values",children:"Constructor with Default Values"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#constructor-and-inheritance",children:"Constructor and Inheritance"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#order-of-execution",children:"Order of Execution"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#common-pitfalls",children:"Common Pitfalls"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#detailed-examples-with-outputs",children:"Detailed Examples with Outputs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#example-1-bank-account-initialization",children:"Example 1: Bank Account Initialization"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#example-2-configuration-loader",children:"Example 2: Configuration Loader"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-a-constructor",children:"What Is a Constructor?"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"constructor"})," is a method that:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Has the special name ",(0,r.jsx)(n.code,{children:"init"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Runs ",(0,r.jsx)(n.strong,{children:"once"})," when you call ",(0,r.jsx)(n.code,{children:"new ClassName(...)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Receives any arguments you pass to ",(0,r.jsx)(n.code,{children:"new"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Sets up the object\u2019s attributes or performs startup tasks."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Without a constructor, every attribute uses its default value and no custom initialization occurs."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"why-use-a-constructor",children:"Why Use a Constructor?"}),"\n",(0,r.jsx)(n.p,{children:"Constructors let you:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initialize attributes"})," to meaningful values instead of defaults."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validate input"})," before the object is used."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encapsulate startup logic"})," (opening files, setting timers, registering events)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ensure every object"})," is in a valid state immediately after creation."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Using constructors promotes safer, cleaner, and more maintainable code."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"constructor-syntax-in-easybite",children:"Constructor Syntax in EasyBite"}),"\n",(0,r.jsxs)(n.p,{children:["Within your ",(0,r.jsx)(n.code,{children:"class \u2026 end class"})," block, define:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"init(param1, param2, \u2026)\r\n    // initialization code\r\nend init\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Name"}),": always ",(0,r.jsx)(n.code,{children:"init"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),": comma\u2011separated list, just like methods."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Body"}),": any valid EasyBite code."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Closure"}),": must end with ",(0,r.jsx)(n.code,{children:"end init"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The arguments you pass to ",(0,r.jsx)(n.code,{children:"new ClassName(...)"})," are forwarded to ",(0,r.jsx)(n.code,{children:"init"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"basic-example-noargument-constructor",children:"Basic Example: No\u2011Argument Constructor"}),"\n",(0,r.jsxs)(n.p,{children:["If you need no parameters, you can still define an ",(0,r.jsx)(n.code,{children:"init"})," to run code on creation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Logger\r\n    set logs to []\r\n\r\n    init()\r\n        show("Logger initialized.")\r\n    end init\r\n\r\n    method log(message)\r\n        append(logs, message)\r\n    end method\r\nend class\r\n\r\nset logger to new Logger()\r\n// Output:\r\n// Logger initialized.\r\n\r\nlogger.log("First entry")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here, creating ",(0,r.jsx)(n.code,{children:"logger"})," prints a message immediately."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"parameterized-constructor",children:"Parameterized Constructor"}),"\n",(0,r.jsx)(n.p,{children:"Most constructors accept parameters to set up attributes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Person\r\n    set name to ""\r\n    set age to 0\r\n\r\n    init(initialName, initialAge)\r\n        set name to initialName\r\n        set age to initialAge\r\n    end init\r\n\r\n    method introduce()\r\n        show("Name: " + name + ", Age: " + age)\r\n    end method\r\nend class\r\n\r\nset alice to new Person("Alice", 30)\r\nalice.introduce()\r\n// Output:\r\n// Name: Alice, Age: 30\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'new Person("Alice", 30)'})," calls ",(0,r.jsx)(n.code,{children:'init("Alice", 30)'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," and ",(0,r.jsx)(n.code,{children:"age"})," are set before any method runs."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"using-this-in-constructors",children:["Using ",(0,r.jsx)(n.code,{children:"this"})," in Constructors"]}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"this"})," keyword to make it explicit you\u2019re assigning to the object\u2019s attributes:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Rectangle\r\n    set width to 0\r\n    set height to 0\r\n\r\n    init(w, h)\r\n        this.width to w\r\n        this.height to h\r\n    end init\r\n\r\n    method area()\r\n        return this.width * this.height\r\n    end method\r\nend class\r\n\r\nset rect to new Rectangle(5, 4)\r\nshow("Area: " + rect.area())\r\n// Output:\r\n// Area: 20\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"this"})," is especially helpful if constructor parameters share names with attributes."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"constructor-with-default-values",children:"Constructor with Default Values"}),"\n",(0,r.jsxs)(n.p,{children:["You can define default values for constructor parameters by using ",(0,r.jsx)(n.code,{children:"to"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Circle\r\n    set radius to 1\r\n\r\n    init(r to 1)\r\n        set radius to r\r\n    end init\r\n\r\n    method circumference()\r\n        return 2 * 3.14159 * radius\r\n    end method\r\nend class\r\n\r\nset c1 to new Circle()\r\nshow("Circumference: " + c1.circumference())\r\n// Output:\r\n// Circumference: 6.28318\r\n\r\nset c2 to new Circle(3)\r\nshow("Circumference: " + c2.circumference())\r\n// Output:\r\n// Circumference: 18.84954\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Omitting the argument uses the default ",(0,r.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"constructor-and-inheritance",children:"Constructor and Inheritance"}),"\n",(0,r.jsxs)(n.p,{children:["When a subclass inherits from a parent class, call the parent\u2019s constructor inside the subclass\u2019s ",(0,r.jsx)(n.code,{children:"init"})," using ",(0,r.jsx)(n.code,{children:"parent.init(...)"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Animal\r\n    set species to ""\r\n\r\n    init(spec)\r\n        set species to spec\r\n    end init\r\n\r\n    method info()\r\n        show("Species: " + species)\r\n    end method\r\nend class\r\n\r\nclass Dog inherit Animal\r\n    set name to ""\r\n\r\n    init(spec, nm)\r\n        parent.init(spec)      // initialize inherited attribute\r\n        set name to nm\r\n    end init\r\n\r\n    method info()\r\n        super.info()          // call Animal.info()\r\n        show("Name: " + name)\r\n    end method\r\nend class\r\n\r\nset d to new Dog("Canine", "Rex")\r\nd.info()\r\n// Output:\r\n// Species: Canine\r\n// Name: Rex\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parent.init(spec)"})," ensures the parent\u2019s initialization logic runs."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"order-of-execution",children:"Order of Execution"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Class definition"})," loads attributes and methods (no runtime action)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"new ClassName(...)"})})," is called."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Inherited ",(0,r.jsx)(n.code,{children:"init"})]})," (if subclass, parent ",(0,r.jsx)(n.code,{children:"init"})," via ",(0,r.jsx)(n.code,{children:"parent"}),") runs first."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Subclass ",(0,r.jsx)(n.code,{children:"init"})]})," body runs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Object is returned"}),", ready for use."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Knowing this order helps you structure initialization across class hierarchies."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Missing ",(0,r.jsx)(n.code,{children:"end init"})]}),": causes a syntax error."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Forgetting to call ",(0,r.jsx)(n.code,{children:"parent.init(...)"})]})," in subclasses: inherited attributes remain at defaults."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mixing up parameter order"}),": arguments must match the ",(0,r.jsx)(n.code,{children:"init"})," signature."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Referencing attributes before initialization"}),": use ",(0,r.jsx)(n.code,{children:"this.attribute"})," only after it\u2019s set."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Always define an ",(0,r.jsx)(n.code,{children:"init"})]})," even if it simply assigns defaults\u2014this makes future extensions easier."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validate constructor arguments"})," (e.g., ensure numbers are positive)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Keep ",(0,r.jsx)(n.code,{children:"init"})," short"]}),": delegate complex setup to private methods."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Document parameters"})," with comments above ",(0,r.jsx)(n.code,{children:"init"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use default values"})," for common cases."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"detailed-examples-with-outputs",children:"Detailed Examples with Outputs"}),"\n",(0,r.jsx)(n.h3,{id:"example-1-bank-account-initialization",children:"Example 1: Bank Account Initialization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class BankAccount\r\n    set balance to 0\r\n\r\n    init(openingBalance to 0)\r\n        if openingBalance >= 0\r\n            set balance to openingBalance\r\n        else\r\n            set balance to 0\r\n        end if\r\n        show("Account opened with balance: " + balance)\r\n    end init\r\n\r\n    method getBalance()\r\n        return balance\r\n    end method\r\nend class\r\n\r\nset acct1 to new BankAccount()\r\n// Output:\r\n// Account opened with balance: 0\r\n\r\nset acct2 to new BankAccount(500)\r\n// Output:\r\n// Account opened with balance: 500\r\n\r\nset acct3 to new BankAccount(-100)\r\n// Output:\r\n// Account opened with balance: 0\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-2-configuration-loader",children:"Example 2: Configuration Loader"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Config\r\n    set settings to {}\r\n\r\n    init(path)\r\n        // pretend to read a file at path\r\n        set settings to { "debug": true, "version": "1.0.0" }\r\n        show("Loaded config from " + path)\r\n    end init\r\n\r\n    method get(key, default to nil)\r\n        if key in settings\r\n            return settings[key]\r\n        else\r\n            return default\r\n        end if\r\n    end method\r\nend class\r\n\r\nset cfg to new Config("/etc/app.conf")\r\n// Output:\r\n// Loaded config from /etc/app.conf\r\n\r\nshow("Debug: " + tostring(cfg.get("debug", false)))\r\n// Output:\r\n// Debug: true\r\nshow("Port: " + tostring(cfg.get("port", 8080)))\r\n// Output:\r\n// Port: 8080\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["Constructors (",(0,r.jsx)(n.code,{children:"init"})," \u2026 ",(0,r.jsx)(n.code,{children:"end init"}),") in EasyBite are the first code that runs when you create an object with ",(0,r.jsx)(n.code,{children:"new"}),". They let you:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set up attributes"})," to meaningful values."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validate input"})," and maintain object integrity."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Chain initialization"})," through inheritance with ",(0,r.jsx)(n.code,{children:"parent.init(...)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provide defaults"})," for flexible object creation."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"By mastering constructors, you ensure every object starts life in a valid, predictable state\u2014laying the foundation for robust, maintainable EasyBite applications. Happy coding!"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);