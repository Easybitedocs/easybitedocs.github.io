"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[3853],{8438:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"libraries/conversion","title":"Convert Library Reference","description":"The convert library provides functions for converting values between types and checking their types at runtime. You must import the convert module to use these functions; calling them directly on values (e.g. x.toint()) is not supported.","source":"@site/docs/libraries/conversion.md","sourceDirName":"libraries","slug":"/libraries/conversion","permalink":"/libraries/conversion","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/libraries/conversion.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"DateTime Library Reference","permalink":"/libraries/datetime"},"next":{"title":"File System Library Reference","permalink":"/libraries/filesystem"}}');var s=r(4848),i=r(8453);const c={},d="Convert Library Reference",o={},l=[{value:"Available Functions",id:"available-functions",level:2},{value:"Examples",id:"examples",level:2},{value:"<code>toint(x)</code>",id:"tointx",level:3},{value:"<code>todouble(x)</code>",id:"todoublex",level:3},{value:"<code>tostring(x)</code>",id:"tostringx",level:3},{value:"<code>isint(x)</code>",id:"isintx",level:3},{value:"<code>isalnum(x)</code>",id:"isalnumx",level:3},{value:"<code>isdigit(x)</code>",id:"isdigitx",level:3},{value:"<code>isdouble(x)</code>",id:"isdoublex",level:3},{value:"<code>isstring(x)</code>",id:"isstringx",level:3},{value:"<code>islist(x)</code>",id:"islistx",level:3},{value:"<code>isdict(x)</code>",id:"isdictx",level:3},{value:"<code>typeof(x)</code>",id:"typeofx",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"convert-library-reference",children:"Convert Library Reference"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"convert"})," library provides functions for converting values between types and checking their types at runtime. ",(0,s.jsxs)(n.strong,{children:["You must import the ",(0,s.jsx)(n.code,{children:"convert"})," module"]})," to use these functions; calling them directly on values (e.g. ",(0,s.jsx)(n.code,{children:"x.toint()"}),") is not supported."]}),"\n",(0,s.jsx)(n.p,{children:"To use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import convert\n"})}),"\n",(0,s.jsx)(n.p,{children:"or for specific functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"from convert import toint, typeof\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"available-functions",children:"Available Functions"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Function"}),(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"toint(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (any)"]}),(0,s.jsxs)(n.td,{children:["Converts ",(0,s.jsx)(n.code,{children:"x"})," to an integer (truncates floats, parses strings, converts bools)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"todouble(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (any)"]}),(0,s.jsxs)(n.td,{children:["Converts ",(0,s.jsx)(n.code,{children:"x"})," to a double (parses strings, converts bools)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"tostring(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (any)"]}),(0,s.jsxs)(n.td,{children:["Converts any ",(0,s.jsx)(n.code,{children:"x"})," to its string representation."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"isint(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (any)"]}),(0,s.jsxs)(n.td,{children:["Returns ",(0,s.jsx)(n.code,{children:"true"})," if ",(0,s.jsx)(n.code,{children:"x"})," is a whole number (no fractional part)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"isalnum(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (String)"]}),(0,s.jsxs)(n.td,{children:["Returns ",(0,s.jsx)(n.code,{children:"true"})," if every character in ",(0,s.jsx)(n.code,{children:"x"})," is alphanumeric."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"isdigit(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (String)"]}),(0,s.jsxs)(n.td,{children:["Returns ",(0,s.jsx)(n.code,{children:"true"})," if every character in ",(0,s.jsx)(n.code,{children:"x"})," is a digit (0\u20139)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"isdouble(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (any)"]}),(0,s.jsxs)(n.td,{children:["Returns ",(0,s.jsx)(n.code,{children:"true"})," if ",(0,s.jsx)(n.code,{children:"x"})," is a number with a fractional part."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"isstring(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (any)"]}),(0,s.jsxs)(n.td,{children:["Returns ",(0,s.jsx)(n.code,{children:"true"})," if ",(0,s.jsx)(n.code,{children:"x"})," is a string."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"islist(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (any)"]}),(0,s.jsxs)(n.td,{children:["Returns ",(0,s.jsx)(n.code,{children:"true"})," if ",(0,s.jsx)(n.code,{children:"x"})," is a list/array."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"isdict(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (any)"]}),(0,s.jsxs)(n.td,{children:["Returns ",(0,s.jsx)(n.code,{children:"true"})," if ",(0,s.jsx)(n.code,{children:"x"})," is a dictionary."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"typeof(x)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"x"})," (any)"]}),(0,s.jsxs)(n.td,{children:["Returns the type of ",(0,s.jsx)(n.code,{children:"x"})," as a string: ",(0,s.jsx)(n.code,{children:'"number"'}),", ",(0,s.jsx)(n.code,{children:'"string"'}),", ",(0,s.jsx)(n.code,{children:'"bool"'}),", ",(0,s.jsx)(n.code,{children:'"list"'}),", ",(0,s.jsx)(n.code,{children:'"dict"'}),", ",(0,s.jsx)(n.code,{children:'"function"'}),", or ",(0,s.jsx)(n.code,{children:'"null"'}),"."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"All examples require importing the module first:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import convert\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tointx",children:(0,s.jsx)(n.code,{children:"toint(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'set a to convert.toint(3.8)\r\nshow(a)\r\n// Output:\r\n// 3\r\n\r\nset b to convert.toint("42")\r\nshow(b)\r\n// Output:\r\n// 42\r\n\r\nset c to convert.toint(false)\r\nshow(c)\r\n// Output:\r\n// 0\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"todoublex",children:(0,s.jsx)(n.code,{children:"todouble(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'set d1 to convert.todouble(5)\r\nshow(d1)\r\n// Output:\r\n// 5\r\n\r\nset d2 to convert.todouble("3.14")\r\nshow(d2)\r\n// Output:\r\n// 3.14\r\n\r\nset d3 to convert.todouble(true)\r\nshow(d3)\r\n// Output:\r\n// 1\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"tostringx",children:(0,s.jsx)(n.code,{children:"tostring(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'set s1 to convert.tostring(123)\r\nshow(s1)\r\n// Output:\r\n// "123"\r\n\r\nset s2 to convert.tostring(true)\r\nshow(s2)\r\n// Output:\r\n// "true"\r\n\r\nset s3 to convert.tostring([1,2,3])\r\nshow(s3)\r\n// Output:\r\n// "[1, 2, 3]"\r\n\r\nset s4 to convert.tostring({"a":1})\r\nshow(s4)\r\n// Output:\r\n// "{a: 1}"\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"isintx",children:(0,s.jsx)(n.code,{children:"isint(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'set i1 to convert.isint(10.0)\r\nshow(i1)\r\n// Output:\r\n// true\r\n\r\nset i2 to convert.isint(10.5)\r\nshow(i2)\r\n// Output:\r\n// false\r\n\r\nset i3 to convert.isint("5")\r\nshow(i3)\r\n// Output:\r\n// false\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"isalnumx",children:(0,s.jsx)(n.code,{children:"isalnum(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'set a1 to convert.isalnum("abc123")\r\nshow(a1)\r\n// Output:\r\n// true\r\n\r\nset a2 to convert.isalnum("abc 123")\r\nshow(a2)\r\n// Output:\r\n// false\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"isdigitx",children:(0,s.jsx)(n.code,{children:"isdigit(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'set d1 to convert.isdigit("2025")\r\nshow(d1)\r\n// Output:\r\n// true\r\n\r\nset d2 to convert.isdigit("20a5")\r\nshow(d2)\r\n// Output:\r\n// false\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"isdoublex",children:(0,s.jsx)(n.code,{children:"isdouble(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"set dd1 to convert.isdouble(3.14)\r\nshow(dd1)\r\n// Output:\r\n// true\r\n\r\nset dd2 to convert.isdouble(3.0)\r\nshow(dd2)\r\n// Output:\r\n// false\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"isstringx",children:(0,s.jsx)(n.code,{children:"isstring(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'set str1 to convert.isstring("hello")\r\nshow(str1)\r\n// Output:\r\n// true\r\n\r\nset str2 to convert.isstring(123)\r\nshow(str2)\r\n// Output:\r\n// false\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"islistx",children:(0,s.jsx)(n.code,{children:"islist(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'set l1 to convert.islist([1,2,3])\r\nshow(l1)\r\n// Output:\r\n// true\r\n\r\nset l2 to convert.islist("not a list")\r\nshow(l2)\r\n// Output:\r\n// false\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"isdictx",children:(0,s.jsx)(n.code,{children:"isdict(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'set m1 to convert.isdict({"key": "value"})\r\nshow(m1)\r\n// Output:\r\n// true\r\n\r\nset m2 to convert.isdict([1,2,3])\r\nshow(m2)\r\n// Output:\r\n// false\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"typeofx",children:(0,s.jsx)(n.code,{children:"typeof(x)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'set t1 to convert.typeof(123)\r\nshow(t1)\r\n// Output:\r\n// "number"\r\n\r\nset t2 to convert.typeof("text")\r\nshow(t2)\r\n// Output:\r\n// "string"\r\n\r\nset t3 to convert.typeof(true)\r\nshow(t3)\r\n// Output:\r\n// "bool"\r\n\r\nset t4 to convert.typeof([1,2])\r\nshow(t4)\r\n// Output:\r\n// "list"\r\n\r\nset t5 to convert.typeof({"a": 1})\r\nshow(t5)\r\n// Output:\r\n// "dict"\r\n\r\nset t6 to convert.typeof(convert.toint)\r\nshow(t6)\r\n// Output:\r\n// "function"\r\n\r\nset t7 to convert.typeof(nil)\r\nshow(t7)\r\n// Output:\r\n// "null"\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"To use conversion and type-checking functions in EasyBite:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Import the module"}),":","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import convert\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Or import specific functions"}),":","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"from convert import toint, typeof\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["All functions must be called through the ",(0,s.jsx)(n.code,{children:"convert"})," module or via selective import. Direct method calls on values without importing are not supported."]})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>d});var t=r(6540);const s={},i=t.createContext(s);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);