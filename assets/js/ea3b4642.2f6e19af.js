"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[350],{6510:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>t,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"oop/polymorphism","title":"Polymorphism","description":"What is Polymorphism?","source":"@site/docs/oop/polymorphism.md","sourceDirName":"oop","slug":"/oop/polymorphism","permalink":"/oop/polymorphism","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/oop/polymorphism.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Encapsulation","permalink":"/oop/encapsulation"},"next":{"title":"Class Relationships","permalink":"/oop/class-relationships"}}');var o=s(4848),r=s(8453);const l={},t="Polymorphism",h={},a=[{value:"What is Polymorphism?",id:"what-is-polymorphism",level:2},{value:"Why is Polymorphism Useful?",id:"why-is-polymorphism-useful",level:3},{value:"Types of Polymorphism",id:"types-of-polymorphism",level:2},{value:"Method Overriding in EasyBite",id:"method-overriding-in-easybite",level:2},{value:"Definition",id:"definition",level:3},{value:"Example: Method Overriding",id:"example-method-overriding",level:2},{value:"Output",id:"output",level:3},{value:"Explanation",id:"explanation",level:3},{value:"Polymorphism with Loops (Dynamic Behavior)",id:"polymorphism-with-loops-dynamic-behavior",level:2},{value:"Example",id:"example",level:3},{value:"Output",id:"output-1",level:3},{value:"Explanation",id:"explanation-1",level:3},{value:"Real-World Analogy",id:"real-world-analogy",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"polymorphism",children:"Polymorphism"})}),"\n",(0,o.jsx)(n.h2,{id:"what-is-polymorphism",children:"What is Polymorphism?"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Polymorphism"}),' is one of the core concepts of Object-Oriented Programming (OOP). The word comes from Greek and means "',(0,o.jsx)(n.strong,{children:"many forms"}),'."']}),"\n",(0,o.jsxs)(n.p,{children:["In programming, ",(0,o.jsx)(n.strong,{children:"polymorphism allows different classes to define methods with the same name, but different behavior"}),". This means that you can call the same method name on different types of objects, and each object will respond in its own way."]}),"\n",(0,o.jsx)(n.h3,{id:"why-is-polymorphism-useful",children:"Why is Polymorphism Useful?"}),"\n",(0,o.jsx)(n.p,{children:"Polymorphism helps you:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Write cleaner and more flexible code"}),"\n",(0,o.jsx)(n.li,{children:"Treat objects of different types in a uniform way"}),"\n",(0,o.jsx)(n.li,{children:"Add new classes with less code changes"}),"\n",(0,o.jsx)(n.li,{children:"Increase reusability and scalability of your programs"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"types-of-polymorphism",children:"Types of Polymorphism"}),"\n",(0,o.jsx)(n.p,{children:"There are two main types of polymorphism:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Compile-time polymorphism"})," (also called method overloading \u2013 not currently supported in EasyBite)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Run-time polymorphism"})," (also called method overriding \u2013 supported in EasyBite)"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["EasyBite supports ",(0,o.jsx)(n.strong,{children:"run-time polymorphism"})," through ",(0,o.jsx)(n.strong,{children:"method overriding"}),"."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"method-overriding-in-easybite",children:"Method Overriding in EasyBite"}),"\n",(0,o.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,o.jsxs)(n.p,{children:["When a subclass defines a method that already exists in its parent class with the ",(0,o.jsx)(n.strong,{children:"same name"}),", it overrides the parent\u2019s method. This allows the subclass to provide its own version of the method."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"example-method-overriding",children:"Example: Method Overriding"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'class Animal\r\n    method speak()\r\n        show "Animal makes a sound"\r\n    end method\r\nend class\r\n\r\nclass Dog inherit Animal\r\n    method speak()\r\n        show "Dog says: Woof!"\r\n    end method\r\nend class\r\n\r\nclass Cat inherit Animal\r\n    method speak()\r\n        show "Cat says: Meow!"\r\n    end method\r\nend class\r\n\r\nset a1 to new Dog()\r\nset a2 to new Cat()\r\n\r\na1.speak()\r\na2.speak()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Dog says: Woof!\r\nCat says: Meow!\n"})}),"\n",(0,o.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Dog"})," and ",(0,o.jsx)(n.code,{children:"Cat"})," both inherit from ",(0,o.jsx)(n.code,{children:"Animal"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["They both override the ",(0,o.jsx)(n.code,{children:"speak"})," method."]}),"\n",(0,o.jsxs)(n.li,{children:["Even though we called the same method name (",(0,o.jsx)(n.code,{children:"speak"}),"), each object responded differently."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"polymorphism-with-loops-dynamic-behavior",children:"Polymorphism with Loops (Dynamic Behavior)"}),"\n",(0,o.jsxs)(n.p,{children:["You can also use polymorphism to work with a ",(0,o.jsx)(n.strong,{children:"list of objects"}),", treating them as the same type but calling the overridden methods dynamically."]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'class Bird\r\n    method fly()\r\n        show "Bird flies"\r\n    end method\r\nend class\r\n\r\nclass Eagle inherit Bird\r\n    method fly()\r\n        show "Eagle flies high"\r\n    end method\r\nend class\r\n\r\nclass Penguin inherit Bird\r\n    method fly()\r\n        show "Penguin cannot fly"\r\n    end method\r\nend class\r\n\r\nset flock to [new Bird(), new Eagle(), new Penguin()]\r\n\r\nforeach b in flock\r\n    b.fly()\r\nend foreach\n'})}),"\n",(0,o.jsx)(n.h3,{id:"output-1",children:"Output"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Bird flies\r\nEagle flies high\r\nPenguin cannot fly\n"})}),"\n",(0,o.jsx)(n.h3,{id:"explanation-1",children:"Explanation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["All the objects are instances of classes that share the same method ",(0,o.jsx)(n.code,{children:"fly"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["When we loop over the list and call ",(0,o.jsx)(n.code,{children:"b.fly()"}),", the correct version of the method is chosen based on the object\u2019s actual class."]}),"\n",(0,o.jsxs)(n.li,{children:["This is ",(0,o.jsx)(n.strong,{children:"runtime polymorphism"})," in action."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"real-world-analogy",children:"Real-World Analogy"}),"\n",(0,o.jsxs)(n.p,{children:["Imagine you have a ",(0,o.jsx)(n.strong,{children:"remote control"})," (the method name) and multiple ",(0,o.jsx)(n.strong,{children:"devices"})," (objects) like a TV, fan, and AC. When you press the power button (same method), each device responds ",(0,o.jsx)(n.strong,{children:"in its own way"}),"\u2014TV turns on, fan starts rotating, AC begins cooling."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"same command"})," (",(0,o.jsx)(n.code,{children:"power"}),") behaves ",(0,o.jsx)(n.strong,{children:"differently"})," depending on the object it is acting on. That\u2019s ",(0,o.jsx)(n.strong,{children:"polymorphism"}),"!"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Polymorphism allows methods with the same name to behave differently depending on the object."}),"\n",(0,o.jsx)(n.li,{children:"It promotes flexibility, extensibility, and reusability in your code."}),"\n",(0,o.jsxs)(n.li,{children:["In EasyBite, polymorphism is achieved through ",(0,o.jsx)(n.strong,{children:"method overriding"})," using ",(0,o.jsx)(n.code,{children:"inherit"}),"."]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>t});var i=s(6540);const o={},r=i.createContext(o);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);