"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[8183],{2790:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"oop/methods","title":"Methods","description":"In EasyBite\u2019s Object\u2011Oriented world, methods are the functions that live inside classes and define the behavior of your objects. While attributes hold state, methods perform actions, manipulate that state, and return results. This guide gives you a very detailed, step\u2011by\u2011step explanation of everything you need to know about methods in EasyBite\u2014from basic syntax to advanced inheritance techniques\u2014with numerous examples and clear outputs so that complete beginners can follow along.","source":"@site/docs/oop/methods.md","sourceDirName":"oop","slug":"/oop/methods","permalink":"/oop/methods","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/oop/methods.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Class Attributes","permalink":"/oop/class-attributes"},"next":{"title":"Constructors","permalink":"/oop/constructors"}}');var r=s(4848),i=s(8453);const d={},o="Methods",l={},a=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What Is a Method?",id:"what-is-a-method",level:2},{value:"Defining a Method",id:"defining-a-method",level:2},{value:"Method Parameters",id:"method-parameters",level:2},{value:"Return Values",id:"return-values",level:2},{value:"Using <code>this</code> in Methods",id:"using-this-in-methods",level:2},{value:"Calling Methods",id:"calling-methods",level:2},{value:"Default Parameters in Methods",id:"default-parameters-in-methods",level:2},{value:"Method Overriding and <code>parent</code>",id:"method-overriding-and-parent",level:2},{value:"Naming Conventions for Methods",id:"naming-conventions-for-methods",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Detailed Examples with Outputs",id:"detailed-examples-with-outputs",level:2},{value:"Example 1: A Simple <code>Person</code> Method",id:"example-1-a-simple-person-method",level:3},{value:"Example 2: Calculator with Multiple Methods",id:"example-2-calculator-with-multiple-methods",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"methods",children:"Methods"})}),"\n",(0,r.jsxs)(n.p,{children:["In EasyBite\u2019s Object\u2011Oriented world, ",(0,r.jsx)(n.strong,{children:"methods"})," are the functions that live inside classes and define the ",(0,r.jsx)(n.strong,{children:"behavior"})," of your objects. While attributes hold state, methods perform actions, manipulate that state, and return results. This guide gives you a ",(0,r.jsx)(n.strong,{children:"very detailed"}),", ",(0,r.jsx)(n.strong,{children:"step\u2011by\u2011step"})," explanation of everything you need to know about methods in EasyBite\u2014from basic syntax to advanced inheritance techniques\u2014with numerous examples and clear outputs so that complete beginners can follow along."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#methods",children:"Methods"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#table-of-contents",children:"Table of Contents"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#what-is-a-method",children:"What Is a Method?"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#defining-a-method",children:"Defining a Method"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#method-parameters",children:"Method Parameters"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#return-values",children:"Return Values"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#using-this-in-methods",children:["Using ",(0,r.jsx)(n.code,{children:"this"})," in Methods"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#calling-methods",children:"Calling Methods"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#default-parameters-in-methods",children:"Default Parameters in Methods"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#method-overriding-and-parent",children:["Method Overriding and ",(0,r.jsx)(n.code,{children:"parent"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#naming-conventions-for-methods",children:"Naming Conventions for Methods"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#detailed-examples-with-outputs",children:"Detailed Examples with Outputs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#example-1-a-simple-person-method",children:["Example 1: A Simple ",(0,r.jsx)(n.code,{children:"Person"})," Method"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#example-2-calculator-with-multiple-methods",children:"Example 2: Calculator with Multiple Methods"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-a-method",children:"What Is a Method?"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"method"})," is simply a function that is defined ",(0,r.jsx)(n.em,{children:"inside"})," a class. Methods describe ",(0,r.jsx)(n.strong,{children:"what an object can do"})," or ",(0,r.jsx)(n.strong,{children:"how it behaves"}),". For example, a ",(0,r.jsx)(n.code,{children:"Car"})," class might have methods like ",(0,r.jsx)(n.code,{children:"start()"}),", ",(0,r.jsx)(n.code,{children:"drive(distance)"}),", and ",(0,r.jsx)(n.code,{children:"stop()"}),". Methods have access to the object they belong to, so they can read and modify that object\u2019s attributes."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"defining-a-method",children:"Defining a Method"}),"\n",(0,r.jsxs)(n.p,{children:["To define a method in EasyBite, you use the ",(0,r.jsx)(n.code,{children:"method"})," keyword, then write its body, and close it with ",(0,r.jsx)(n.code,{children:"end method"}),". Methods go inside a ",(0,r.jsx)(n.code,{children:"class ... end class"})," block:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Example\r\n    set counter to 0\r\n\r\n    method increment()\r\n        set counter to counter + 1\r\n    end method\r\n\r\n    method reset()\r\n        set counter to 0\r\n    end method\r\nend class\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"method increment()"})," declares a method named ",(0,r.jsx)(n.code,{children:"increment"})," with no parameters."]}),"\n",(0,r.jsx)(n.li,{children:"The body runs in the context of the current object."}),"\n",(0,r.jsxs)(n.li,{children:["You must always close a method with ",(0,r.jsx)(n.code,{children:"end method"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"No output"})," occurs until you create an object and call its methods."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"method-parameters",children:"Method Parameters"}),"\n",(0,r.jsx)(n.p,{children:"Methods can accept parameters, just like global functions. You list them in parentheses after the method name:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Calculator\r\n    method add(a, b)\r\n        return a + b\r\n    end method\r\n\r\n    method multiply(x, y)\r\n        return x * y\r\n    end method\r\nend class\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"a"})," and ",(0,r.jsx)(n.code,{children:"b"})," are ",(0,r.jsx)(n.strong,{children:"required"})," parameters for ",(0,r.jsx)(n.code,{children:"add"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["You must supply values when you call ",(0,r.jsx)(n.code,{children:"add()"})," on an object."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"return-values",children:"Return Values"}),"\n",(0,r.jsxs)(n.p,{children:["If a method computes something you want to use elsewhere, use the ",(0,r.jsx)(n.code,{children:"return"})," keyword. The value you return is handed back to the caller:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Greeter\r\n    method getGreeting(name)\r\n        return "Hello, " + name + "!"\r\n    end method\r\nend class\r\n\r\nset g to new Greeter()\r\nset message to g.getGreeting("Emma")\r\nshow(message)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Hello, Emma!\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If a method does not include a ",(0,r.jsx)(n.code,{children:"return"}),", it implicitly returns ",(0,r.jsx)(n.code,{children:"nil"})," (or no value), which is fine for methods that perform actions rather than calculations."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"using-this-in-methods",children:["Using ",(0,r.jsx)(n.code,{children:"this"})," in Methods"]}),"\n",(0,r.jsxs)(n.p,{children:["Inside a method, you can refer to the ",(0,r.jsx)(n.strong,{children:"current object"})," explicitly using the ",(0,r.jsx)(n.code,{children:"this"})," keyword. This is especially helpful if your method has a parameter or local variable with the same name as an attribute:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Counter\r\n    set count to 0\r\n\r\n    method init(start)\r\n        set this.count to start\r\n    end method\r\n\r\n    method increment()\r\n        set this.count to this.count + 1\r\n    end method\r\n\r\n    method getCount()\r\n        return this.count\r\n    end method\r\nend class\r\n\r\nset c to new Counter(10)\r\nshow(c.getCount())\r\n// Output:\r\n// 10\r\nc.increment()\r\nshow(c.getCount())\r\n// Output:\r\n// 11\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"this.count"})," makes it crystal\u2011clear you\u2019re working with the object\u2019s attribute."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"calling-methods",children:"Calling Methods"}),"\n",(0,r.jsxs)(n.p,{children:["Once you\u2019ve defined a class with methods and created an object using ",(0,r.jsx)(n.code,{children:"new"}),", you invoke a method with dot notation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"set car to new Car()\r\ncar.start()\r\ncar.drive(15)\r\ncar.stop()\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The syntax is ",(0,r.jsx)(n.code,{children:"object.methodName(args\u2026)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Parentheses ",(0,r.jsx)(n.code,{children:"()"})," are always required, even if there are no parameters."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"default-parameters-in-methods",children:"Default Parameters in Methods"}),"\n",(0,r.jsxs)(n.p,{children:["EasyBite lets you supply ",(0,r.jsx)(n.strong,{children:"default values"})," for method parameters, so callers can omit them if they\u2019re fine with the standard behavior:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Logger\r\n    method log(message, prefix to "[LOG]")\r\n        show(prefix + " " + message)\r\n    end method\r\nend class\r\n\r\nset logger to new Logger()\r\nlogger.log("System started")\r\n// Output:\r\n// [LOG] System started\r\n\r\nlogger.log("Disk full", "[ERROR]")\r\n// Output:\r\n// [ERROR] Disk full\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'prefix to "[LOG]"'})," sets a default."]}),"\n",(0,r.jsxs)(n.li,{children:["Omitting ",(0,r.jsx)(n.code,{children:"prefix"})," uses ",(0,r.jsx)(n.code,{children:'"[LOG]"'}),"; supplying it overrides the default."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"method-overriding-and-parent",children:["Method Overriding and ",(0,r.jsx)(n.code,{children:"parent"})]}),"\n",(0,r.jsxs)(n.p,{children:["In inheritance, a subclass can ",(0,r.jsx)(n.strong,{children:"override"})," a method from its parent. To call the parent\u2019s version inside the override, use ",(0,r.jsx)(n.code,{children:"parent.methodName(...)"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Animal\r\n    method speak()\r\n        show("Animal makes a sound.")\r\n    end method\r\nend class\r\n\r\nclass Dog inherit Animal\r\n    method speak()\r\n        parent.speak()           // call Animal\u2019s speak()\r\n        show("Dog barks.")\r\n    end method\r\nend class\r\n\r\nset pet to new Dog()\r\npet.speak()\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Animal makes a sound.\r\nDog barks.\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This technique lets you ",(0,r.jsx)(n.strong,{children:"extend"})," behavior instead of replacing it entirely."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"naming-conventions-for-methods",children:"Naming Conventions for Methods"}),"\n",(0,r.jsx)(n.p,{children:"To keep your code consistent and readable:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"all lowercase"}),", with ",(0,r.jsx)(n.strong,{children:"no underscores"})," (e.g., ",(0,r.jsx)(n.code,{children:"startengine"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Keep names ",(0,r.jsx)(n.strong,{children:"descriptive"})," but concise (e.g., ",(0,r.jsx)(n.code,{children:"calculatearea"})," rather than ",(0,r.jsx)(n.code,{children:"ca"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Match the verb\u2011object pattern for clarity (e.g., ",(0,r.jsx)(n.code,{children:"setspeed"}),", ",(0,r.jsx)(n.code,{children:"getbalance"}),", ",(0,r.jsx)(n.code,{children:"printreport"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"One responsibility per method"}),": keep methods focused on a single task."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limit parameters"}),": more than three or four parameters can be confusing."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use default parameters"})," for optional behavior."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Leverage ",(0,r.jsx)(n.code,{children:"this"})]})," to make attribute access explicit."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Document edge cases"}),": if a method can fail or return ",(0,r.jsx)(n.code,{children:"null"}),", note it in comments."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"detailed-examples-with-outputs",children:"Detailed Examples with Outputs"}),"\n",(0,r.jsxs)(n.h3,{id:"example-1-a-simple-person-method",children:["Example 1: A Simple ",(0,r.jsx)(n.code,{children:"Person"})," Method"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Person\r\n    set name to ""\r\n    set age to 0\r\n\r\n    init(n, a)\r\n        this.name to n\r\n        this.age to a\r\n    end init\r\n\r\n    method birthday()\r\n        this.age to this.age + 1\r\n        show("Happy birthday, " + this.name + "! You are now " + this.age + ".")\r\n    end method\r\nend class\r\n\r\nset p to new Person("Sam", 29)\r\np.birthday()\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Happy birthday, Sam! You are now 30.\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example-2-calculator-with-multiple-methods",children:"Example 2: Calculator with Multiple Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Calculator\r\n    method add(a, b)\r\n        return a + b\r\n    end method\r\n\r\n    method subtract(a, b)\r\n        return a - b\r\n    end method\r\n\r\n    method multiply(a, b)\r\n        return a * b\r\n    end method\r\n\r\n    method divide(a, b)\r\n        if b = 0\r\n            return nil\r\n        end if\r\n        return a / b\r\n    end method\r\nend class\r\n\r\nset calc to new Calculator()\r\nshow(calc.add(10, 5))\r\n// Output:\r\n// 15\r\nshow(calc.divide(10, 0))\r\n// Output:\r\n// null\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Methods are the essential building blocks of object behavior in EasyBite. You now know how to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Define"})," methods with ",(0,r.jsx)(n.code,{children:"method \u2026 end method"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Accept parameters"})," and provide ",(0,r.jsx)(n.strong,{children:"default values"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return"})," results to callers."]}),"\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"this"})})," keyword for clarity."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Override"})," methods in subclasses and call the parent with ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"parent"})}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Name"})," and ",(0,r.jsx)(n.strong,{children:"organize"})," methods following best practices."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"With this knowledge, you can design rich, interactive objects and build scalable, maintainable applications in EasyBite. Happy coding!"})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>o});var t=s(6540);const r={},i=t.createContext(r);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);