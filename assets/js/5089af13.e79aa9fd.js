"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[8080],{1701:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"oop/class-attributes","title":"Class Attributes","description":"In Object\u2011Oriented Programming, attributes (also called properties or fields) are the pieces of data that each object of a class holds. In EasyBite, attributes define the state of an object, and methods define its behavior. This document provides a very detailed, step\u2011by\u2011step guide to declaring, initializing, accessing, and managing class attributes in EasyBite\u2014including how to use the this keyword to refer to the current object. Every concept is explained simply, with plenty of examples and outputs, so that even complete beginners can follow along.","source":"@site/docs/oop/class-attributes.md","sourceDirName":"oop","slug":"/oop/class-attributes","permalink":"/oop/class-attributes","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/oop/class-attributes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Classes and Objects","permalink":"/oop/classes-objects"},"next":{"title":"Methods","permalink":"/oop/methods"}}');var i=t(4848),r=t(8453);const l={},a="Class Attributes",c={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What Are Attributes?",id:"what-are-attributes",level:2},{value:"Declaring Attributes in a Class",id:"declaring-attributes-in-a-class",level:2},{value:"Default Values for Attributes",id:"default-values-for-attributes",level:2},{value:"Instance Attributes vs. Class\u2011Level Attributes",id:"instance-attributes-vs-classlevel-attributes",level:2},{value:"Instance Attributes",id:"instance-attributes",level:3},{value:"Class\u2011Level Attributes (Static)",id:"classlevel-attributes-static",level:3},{value:"Initializing Attributes in <code>init</code>",id:"initializing-attributes-in-init",level:2},{value:"Accessing and Modifying Attributes",id:"accessing-and-modifying-attributes",level:2},{value:"Using Attributes Inside Methods",id:"using-attributes-inside-methods",level:2},{value:"Using the <code>this</code> Keyword",id:"using-the-this-keyword",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Detailed Examples",id:"detailed-examples",level:3},{value:"Inherited Attributes in Subclasses",id:"inherited-attributes-in-subclasses",level:2},{value:"Attribute Naming Conventions",id:"attribute-naming-conventions",level:2},{value:"Detailed Examples with Outputs",id:"detailed-examples-with-outputs",level:2},{value:"Example 1: Simple <code>Person</code> Class",id:"example-1-simple-person-class",level:3},{value:"Example 2: <code>Car</code> Class with <code>this</code> and Multiple Attributes",id:"example-2-car-class-with-this-and-multiple-attributes",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function o(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"class-attributes",children:"Class Attributes"})}),"\n",(0,i.jsxs)(s.p,{children:["In Object\u2011Oriented Programming, ",(0,i.jsx)(s.strong,{children:"attributes"})," (also called ",(0,i.jsx)(s.em,{children:"properties"})," or ",(0,i.jsx)(s.em,{children:"fields"}),") are the pieces of data that each object of a class holds. In EasyBite, attributes define the ",(0,i.jsx)(s.em,{children:"state"})," of an object, and methods define its ",(0,i.jsx)(s.em,{children:"behavior"}),". This document provides a ",(0,i.jsx)(s.strong,{children:"very detailed"}),", ",(0,i.jsx)(s.strong,{children:"step\u2011by\u2011step"})," guide to declaring, initializing, accessing, and managing class attributes in EasyBite\u2014including how to use the ",(0,i.jsx)(s.code,{children:"this"})," keyword to refer to the current object. Every concept is explained simply, with plenty of examples and outputs, so that even complete beginners can follow along."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#class-attributes",children:"Class Attributes"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#table-of-contents",children:"Table of Contents"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#what-are-attributes",children:"What Are Attributes?"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#declaring-attributes-in-a-class",children:"Declaring Attributes in a Class"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#default-values-for-attributes",children:"Default Values for Attributes"})}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#instance-attributes-vs-classlevel-attributes",children:"Instance Attributes vs. Class\u2011Level Attributes"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#instance-attributes",children:"Instance Attributes"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#classlevel-attributes-static",children:"Class\u2011Level Attributes (Static)"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsxs)(s.a,{href:"#initializing-attributes-in-init",children:["Initializing Attributes in ",(0,i.jsx)(s.code,{children:"init"})]})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#accessing-and-modifying-attributes",children:"Accessing and Modifying Attributes"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#using-attributes-inside-methods",children:"Using Attributes Inside Methods"})}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsxs)(s.a,{href:"#using-the-this-keyword",children:["Using the ",(0,i.jsx)(s.code,{children:"this"})," Keyword"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#syntax",children:"Syntax"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#detailed-examples",children:"Detailed Examples"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#inherited-attributes-in-subclasses",children:"Inherited Attributes in Subclasses"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#attribute-naming-conventions",children:"Attribute Naming Conventions"})}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#detailed-examples-with-outputs",children:"Detailed Examples with Outputs"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsxs)(s.a,{href:"#example-1-simple-person-class",children:["Example 1: Simple ",(0,i.jsx)(s.code,{children:"Person"})," Class"]})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsxs)(s.a,{href:"#example-2-car-class-with-this-and-multiple-attributes",children:["Example 2: ",(0,i.jsx)(s.code,{children:"Car"})," Class with ",(0,i.jsx)(s.code,{children:"this"})," and Multiple Attributes"]})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"what-are-attributes",children:"What Are Attributes?"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Attributes"})," are variables that belong to each object (instance) of a class."]}),"\n",(0,i.jsxs)(s.li,{children:["They represent the ",(0,i.jsx)(s.em,{children:"state"})," or ",(0,i.jsx)(s.em,{children:"data"})," of an object."]}),"\n",(0,i.jsx)(s.li,{children:"Every instance has its own copy of each attribute declared in the class."}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["For example, a ",(0,i.jsx)(s.code,{children:"Person"})," class might have attributes ",(0,i.jsx)(s.code,{children:"name"})," and ",(0,i.jsx)(s.code,{children:"age"}),". Each ",(0,i.jsx)(s.code,{children:"Person"})," object stores its own ",(0,i.jsx)(s.code,{children:"name"})," and ",(0,i.jsx)(s.code,{children:"age"})," independently."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"declaring-attributes-in-a-class",children:"Declaring Attributes in a Class"}),"\n",(0,i.jsxs)(s.p,{children:["Attributes are declared at the top of a class using ",(0,i.jsx)(s.code,{children:"set"})," and a default value. The syntax is:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"class ClassName\r\n    set attribute1 to defaultValue1\r\n    set attribute2 to defaultValue2\r\n    ...\r\nend class\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"attribute1"}),", ",(0,i.jsx)(s.code,{children:"attribute2"}),", etc. become part of every object created from ",(0,i.jsx)(s.code,{children:"ClassName"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["You must supply a default value (e.g., an empty string ",(0,i.jsx)(s.code,{children:'""'}),", a number ",(0,i.jsx)(s.code,{children:"0"}),", or an empty list ",(0,i.jsx)(s.code,{children:"[]"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"No output"})," is produced by declaring attributes alone."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"default-values-for-attributes",children:"Default Values for Attributes"}),"\n",(0,i.jsx)(s.p,{children:"Defaults serve two purposes:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Initialization"}),": Ensure attributes have a known starting value."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Type hinting"}),": Indicate what kind of data the attribute holds (string, number, list, boolean)."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Examples of defaults:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"String"}),": ",(0,i.jsx)(s.code,{children:'set title to ""'})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Number"}),": ",(0,i.jsx)(s.code,{children:"set count to 0"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"List"}),": ",(0,i.jsx)(s.code,{children:"set items to []"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Boolean"}),": ",(0,i.jsx)(s.code,{children:"set isActive to true"})]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"These defaults apply to every new object unless you override them in the constructor."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"instance-attributes-vs-classlevel-attributes",children:"Instance Attributes vs. Class\u2011Level Attributes"}),"\n",(0,i.jsx)(s.h3,{id:"instance-attributes",children:"Instance Attributes"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Declared inside ",(0,i.jsx)(s.code,{children:"class ... end class"}),"."]}),"\n",(0,i.jsx)(s.li,{children:"Each object gets its own separate copy."}),"\n",(0,i.jsx)(s.li,{children:"Modifying an attribute on one object does not affect others."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"classlevel-attributes-static",children:"Class\u2011Level Attributes (Static)"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["EasyBite does ",(0,i.jsx)(s.em,{children:"not"})," natively support static or class\u2011level attributes in the same way as some other languages."]}),"\n",(0,i.jsx)(s.li,{children:"All attributes you declare in the class block behave as instance attributes."}),"\n",(0,i.jsx)(s.li,{children:"If you need shared data, you can declare a global variable outside the class."}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.h2,{id:"initializing-attributes-in-init",children:["Initializing Attributes in ",(0,i.jsx)(s.code,{children:"init"})]}),"\n",(0,i.jsxs)(s.p,{children:["To set attributes based on constructor parameters, define an ",(0,i.jsx)(s.code,{children:"init"})," block inside your class:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:'class Person\r\n    set name to ""\r\n    set age to 0\r\n\r\n    init(initialName, initialAge)\r\n        set name to initialName\r\n        set age to initialAge\r\n    end init\r\nend class\n'})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"init"})," runs automatically when you create a new object with ",(0,i.jsx)(s.code,{children:"new"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["You pass ",(0,i.jsx)(s.code,{children:"initialName"})," and ",(0,i.jsx)(s.code,{children:"initialAge"})," to ",(0,i.jsx)(s.code,{children:"new Person(...)"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["Inside ",(0,i.jsx)(s.code,{children:"init"})," you assign those values to the attributes."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"No output"})," occurs until you use the object."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"accessing-and-modifying-attributes",children:"Accessing and Modifying Attributes"}),"\n",(0,i.jsxs)(s.p,{children:["Once you have an object, you can ",(0,i.jsx)(s.strong,{children:"read"})," or ",(0,i.jsx)(s.strong,{children:"write"})," its attributes using dot notation:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:'set p to new Person("Alice", 30)\r\n\r\n// Read an attribute\r\nshow("Name: " + p.name)\r\n// Output:\r\n// Name: Alice\r\n\r\n// Modify an attribute\r\nset p.age to 31\r\nshow("New age: " + p.age)\r\n// Output:\r\n// New age: 31\n'})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"p.name"})," returns the current value of ",(0,i.jsx)(s.code,{children:"name"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"set p.age to 31"})," changes ",(0,i.jsx)(s.code,{children:"age"})," on that specific object."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"using-attributes-inside-methods",children:"Using Attributes Inside Methods"}),"\n",(0,i.jsx)(s.p,{children:"Methods defined in the class can refer directly to attributes without qualification:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:'class Person\r\n    set name to ""\r\n    set age to 0\r\n\r\n    init(n, a)\r\n        set name to n\r\n        set age to a\r\n    end init\r\n\r\n    method describe()\r\n        show("Person: " + name + ", Age: " + age)\r\n    end method\r\nend class\r\n\r\nset p to new Person("Bob", 25)\r\np.describe()\r\n// Output:\r\n// Person: Bob, Age: 25\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Inside ",(0,i.jsx)(s.code,{children:"describe()"}),", ",(0,i.jsx)(s.code,{children:"name"})," and ",(0,i.jsx)(s.code,{children:"age"})," refer to that object\u2019s attributes."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.h2,{id:"using-the-this-keyword",children:["Using the ",(0,i.jsx)(s.code,{children:"this"})," Keyword"]}),"\n",(0,i.jsxs)(s.p,{children:["EasyBite also supports the ",(0,i.jsx)(s.code,{children:"this"})," keyword to explicitly refer to the current object. This can make code clearer, especially when attribute names shadow local variables or parameters."]}),"\n",(0,i.jsx)(s.h3,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Inside methods or ",(0,i.jsx)(s.code,{children:"init"}),", use ",(0,i.jsx)(s.code,{children:"this.attribute"})," to refer to the object\u2019s property."]}),"\n",(0,i.jsxs)(s.li,{children:["Similarly, ",(0,i.jsx)(s.code,{children:"this.method()"})," calls another method on the same object."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"detailed-examples",children:"Detailed Examples"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:'class Counter\r\n    set count to 0\r\n\r\n    init(start)\r\n        this.count to start\r\n    end init\r\n\r\n    method increment()\r\n        this.count to this.count + 1\r\n    end method\r\n\r\n    method display()\r\n        show("Current count is " + this.count)\r\n    end method\r\nend class\r\n\r\nset c to new Counter(5)\r\nc.display()\r\n// Output:\r\n// Current count is 5\r\n\r\nc.increment()\r\nc.display()\r\n// Output:\r\n// Current count is 6\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Here, using ",(0,i.jsx)(s.code,{children:"this.count"})," makes it explicit that we\u2019re modifying the object\u2019s ",(0,i.jsx)(s.code,{children:"count"})," attribute."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"inherited-attributes-in-subclasses",children:"Inherited Attributes in Subclasses"}),"\n",(0,i.jsxs)(s.p,{children:["When you create a subclass with ",(0,i.jsx)(s.code,{children:"inherit"}),", it automatically gets all attributes from its parent:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:'class Employee inherit Person\r\n    set employeeId to ""\r\nend class\r\n\r\nset e to new Employee("Carol", 28)\r\nshow("Name: " + e.name)\r\n// Output:\r\n// Name: Carol\r\n\r\nshow("ID: " + e.employeeId)\r\n// Output:\r\n// ID:\n'})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"Employee"})," inherits ",(0,i.jsx)(s.code,{children:"name"})," and ",(0,i.jsx)(s.code,{children:"age"})," from ",(0,i.jsx)(s.code,{children:"Person"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["It adds its own ",(0,i.jsx)(s.code,{children:"employeeId"})," attribute."]}),"\n",(0,i.jsxs)(s.li,{children:["If ",(0,i.jsx)(s.code,{children:"Person"})," has an ",(0,i.jsx)(s.code,{children:"init"}),", be sure to call ",(0,i.jsx)(s.code,{children:"super.init(...)"})," in ",(0,i.jsx)(s.code,{children:"Employee"}),"\u2019s ",(0,i.jsx)(s.code,{children:"init"})," to initialize inherited attributes."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"attribute-naming-conventions",children:"Attribute Naming Conventions"}),"\n",(0,i.jsx)(s.p,{children:"Follow EasyBite\u2019s naming rules for attributes:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Lowercase"})," names, optionally with underscores for readability."]}),"\n",(0,i.jsx)(s.li,{children:"No hyphens or spaces."}),"\n",(0,i.jsxs)(s.li,{children:["Descriptive but concise:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Good: ",(0,i.jsx)(s.code,{children:"user_name"}),", ",(0,i.jsx)(s.code,{children:"total_count"})]}),"\n",(0,i.jsxs)(s.li,{children:["Avoid: ",(0,i.jsx)(s.code,{children:"UserName"}),", ",(0,i.jsx)(s.code,{children:"totalCount"}),", ",(0,i.jsx)(s.code,{children:"user-name"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"detailed-examples-with-outputs",children:"Detailed Examples with Outputs"}),"\n",(0,i.jsxs)(s.h3,{id:"example-1-simple-person-class",children:["Example 1: Simple ",(0,i.jsx)(s.code,{children:"Person"})," Class"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:'class Person\r\n    set name to ""\r\n    set age to 0\r\n\r\n    init(n, a)\r\n        this.name to n\r\n        this.age to a\r\n    end init\r\n\r\n    method introduce()\r\n        show("Hi, I am " + this.name + " and I am " + this.age + " years old.")\r\n    end method\r\nend class\r\n\r\nset alice to new Person("Alice", 30)\r\nalice.introduce()\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Output:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hi, I am Alice and I am 30 years old.\n"})}),"\n",(0,i.jsxs)(s.h3,{id:"example-2-car-class-with-this-and-multiple-attributes",children:["Example 2: ",(0,i.jsx)(s.code,{children:"Car"})," Class with ",(0,i.jsx)(s.code,{children:"this"})," and Multiple Attributes"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:'class Car\r\n    set make to ""\r\n    set model to ""\r\n    set year to 0\r\n    set speed to 0\r\n\r\n    init(mk, mdl, yr)\r\n        this.make to mk\r\n        this.model to mdl\r\n        this.year to yr\r\n    end init\r\n\r\n    method status()\r\n        show("Car: " + this.year + " " + this.make + " " + this.model + "; Speed: " + this.speed + " km/h")\r\n    end method\r\nend class\r\n\r\nset car1 to new Car("Toyota", "Corolla", 2021)\r\ncar1.status()\n'})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Output:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Car: 2021 Toyota Corolla; Speed: 0 km/h\n"})}),"\n",(0,i.jsx)(s.p,{children:"Then modify speed:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"set car1.speed to 80\r\ncar1.status()\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Output:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Car: 2021 Toyota Corolla; Speed: 80 km/h\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsxs)(s.strong,{children:["Use ",(0,i.jsx)(s.code,{children:"this"})]})," when method parameters or local variables share names with attributes."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Always provide sensible defaults"})," for attributes."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsxs)(s.strong,{children:["Initialize attributes in ",(0,i.jsx)(s.code,{children:"init"})]})," to override defaults."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Group related attributes"})," at the top for readability."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Document each attribute"})," with inline comments if needed."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(s.p,{children:["Class attributes in EasyBite are the foundation of an object\u2019s state. By declaring attributes with ",(0,i.jsx)(s.code,{children:"set ... to"}),", initializing them in ",(0,i.jsx)(s.code,{children:"init"}),", accessing them via ",(0,i.jsx)(s.code,{children:"object.attribute"})," or ",(0,i.jsx)(s.code,{children:"this.attribute"}),", and understanding inheritance, you can build clear, maintainable data models. Combined with methods and the ",(0,i.jsx)(s.code,{children:"this"})," keyword, attributes enable you to write robust, real\u2011world applications using EasyBite\u2019s beginner\u2011friendly OOP syntax. Happy coding!"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>a});var n=t(6540);const i={},r=n.createContext(i);function l(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);