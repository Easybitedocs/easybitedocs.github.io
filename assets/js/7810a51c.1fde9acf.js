"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[9587],{3966:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"oop/inheritance","title":"Inheritance","description":"Inheritance is one of the most powerful and foundational concepts in object-oriented programming (OOP). It allows you to create new classes based on existing classes, making your code more organized, reusable, and maintainable. In EasyBite, inheritance is implemented in a very simple and readable way, making it especially friendly for beginners.","source":"@site/docs/oop/inheritance.md","sourceDirName":"oop","slug":"/oop/inheritance","permalink":"/oop/inheritance","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/oop/inheritance.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Access Modifiers","permalink":"/oop/access-modifiers"},"next":{"title":"Encapsulation","permalink":"/oop/encapsulation"}}');var r=i(4848),l=i(8453);const t={},a="Inheritance",d={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What Is Inheritance?",id:"what-is-inheritance",level:2},{value:"Real-life Analogy:",id:"real-life-analogy",level:3},{value:"Why Use Inheritance?",id:"why-use-inheritance",level:2},{value:"Inheritance Syntax",id:"inheritance-syntax",level:2},{value:"Example:",id:"example",level:3},{value:"Output:",id:"output",level:3},{value:"How Inheritance Works",id:"how-inheritance-works",level:2},{value:"Calling Parent Methods",id:"calling-parent-methods",level:2},{value:"Example:",id:"example-1",level:3},{value:"Output:",id:"output-1",level:3},{value:"Calling Parent Constructor",id:"calling-parent-constructor",level:2},{value:"Example:",id:"example-2",level:3},{value:"Output:",id:"output-2",level:3},{value:"Overriding Methods",id:"overriding-methods",level:2},{value:"Example:",id:"example-3",level:3},{value:"Output:",id:"output-3",level:3},{value:"Examples with Output",id:"examples-with-output",level:2},{value:"Example 1: Basic Inheritance",id:"example-1-basic-inheritance",level:3},{value:"Output:",id:"output-4",level:3},{value:"Example 2: Adding New Methods in Child",id:"example-2-adding-new-methods-in-child",level:3},{value:"Output:",id:"output-5",level:3},{value:"Example 3: Overriding and Using <code>parent</code>",id:"example-3-overriding-and-using-parent",level:3},{value:"Output:",id:"output-6",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"inheritance",children:"Inheritance"})}),"\n",(0,r.jsxs)(n.p,{children:["Inheritance is one of the most powerful and foundational concepts in object-oriented programming (OOP). It allows you to create ",(0,r.jsx)(n.strong,{children:"new classes"})," based on ",(0,r.jsx)(n.strong,{children:"existing classes"}),", making your code more organized, reusable, and maintainable. In EasyBite, inheritance is implemented in a very simple and readable way, making it especially friendly for beginners."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#inheritance",children:"Inheritance"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#table-of-contents",children:"Table of Contents"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#what-is-inheritance",children:"What Is Inheritance?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#real-life-analogy",children:"Real-life Analogy:"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#why-use-inheritance",children:"Why Use Inheritance?"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#inheritance-syntax",children:"Inheritance Syntax"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#example",children:"Example:"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#output",children:"Output:"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#how-inheritance-works",children:"How Inheritance Works"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#calling-parent-methods",children:"Calling Parent Methods"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#example-1",children:"Example:"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#output-1",children:"Output:"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#calling-parent-constructor",children:"Calling Parent Constructor"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#example-2",children:"Example:"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#output-2",children:"Output:"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#overriding-methods",children:"Overriding Methods"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#example-3",children:"Example:"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#output-3",children:"Output:"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#examples-with-output",children:"Examples with Output"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#example-1-basic-inheritance",children:"Example 1: Basic Inheritance"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#output-4",children:"Output:"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#example-2-adding-new-methods-in-child",children:"Example 2: Adding New Methods in Child"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#output-5",children:"Output:"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#example-3-overriding-and-using-parent",children:["Example 3: Overriding and Using ",(0,r.jsx)(n.code,{children:"parent"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#output-6",children:"Output:"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-is-inheritance",children:"What Is Inheritance?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Inheritance"})," allows you to define a new class that ",(0,r.jsx)(n.strong,{children:"inherits"})," the attributes and behaviors (methods) of an existing class. This new class is called the ",(0,r.jsx)(n.strong,{children:"child class"})," (or ",(0,r.jsx)(n.strong,{children:"subclass"}),"), while the existing class is called the ",(0,r.jsx)(n.strong,{children:"parent class"})," (or ",(0,r.jsx)(n.strong,{children:"superclass"}),")."]}),"\n",(0,r.jsx)(n.p,{children:"This means the child class has access to everything the parent class has, unless it explicitly overrides it."}),"\n",(0,r.jsx)(n.h3,{id:"real-life-analogy",children:"Real-life Analogy:"}),"\n",(0,r.jsxs)(n.p,{children:["Imagine a general class called ",(0,r.jsx)(n.code,{children:"Animal"}),". All animals can eat and sleep. Now we want to define a ",(0,r.jsx)(n.code,{children:"Dog"}),". Instead of writing the eating and sleeping behavior again, we just make ",(0,r.jsx)(n.code,{children:"Dog"})," inherit from ",(0,r.jsx)(n.code,{children:"Animal"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"why-use-inheritance",children:"Why Use Inheritance?"}),"\n",(0,r.jsx)(n.p,{children:"Here are some important benefits of inheritance:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Code Reusability"}),": Write common code once in the parent class and reuse it in multiple child classes."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Organization"}),": Keep your code clean and structured. Similar classes can share a base class."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Extensibility"}),": Easily extend base behavior without touching the original class."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Readability"}),": Helps new developers understand relationships between classes."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"inheritance-syntax",children:"Inheritance Syntax"}),"\n",(0,r.jsxs)(n.p,{children:["In EasyBite, you use the ",(0,r.jsx)(n.code,{children:"inherit"})," keyword to make one class inherit another."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class ChildClass inherit ParentClass\r\n    // child-specific code\r\nend class\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Animal\r\n    method speak()\r\n        show("Animal makes a sound")\r\n    end method\r\nend class\r\n\r\nclass Dog inherit Animal\r\nend class\r\n\r\nset mydog to new Dog()\r\nmydog.speak()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output",children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"Animal makes a sound\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"how-inheritance-works",children:"How Inheritance Works"}),"\n",(0,r.jsx)(n.p,{children:"When a child class inherits from a parent class:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["It ",(0,r.jsx)(n.strong,{children:"automatically gains"})," all public methods and attributes of the parent."]}),"\n",(0,r.jsxs)(n.li,{children:["It can ",(0,r.jsx)(n.strong,{children:"override"})," (replace) any method it wants."]}),"\n",(0,r.jsxs)(n.li,{children:["It can ",(0,r.jsx)(n.strong,{children:"add new"})," methods or attributes of its own."]}),"\n",(0,r.jsxs)(n.li,{children:["It cannot access ",(0,r.jsx)(n.code,{children:"secret"})," (private) methods or attributes from the parent."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"calling-parent-methods",children:"Calling Parent Methods"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes, you want to override a method but still make use of the parent\u2019s method. EasyBite allows this by using the ",(0,r.jsx)(n.code,{children:"parent"})," keyword."]}),"\n",(0,r.jsx)(n.h3,{id:"example-1",children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Animal\r\n    method speak()\r\n        show("Animal sound")\r\n    end method\r\nend class\r\n\r\nclass Dog inherit Animal\r\n    method speak()\r\n        show("Dog says:")\r\n        parent.speak()\r\n    end method\r\nend class\r\n\r\nset pet to new Dog()\r\npet.speak()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-1",children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"Dog says:\r\nAnimal sound\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Here, ",(0,r.jsx)(n.code,{children:"Dog"})," overrides the ",(0,r.jsx)(n.code,{children:"speak()"})," method but still calls the ",(0,r.jsx)(n.code,{children:"speak()"})," method from ",(0,r.jsx)(n.code,{children:"Animal"})," using ",(0,r.jsx)(n.code,{children:"parent.speak()"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"calling-parent-constructor",children:"Calling Parent Constructor"}),"\n",(0,r.jsxs)(n.p,{children:["If the parent class has an ",(0,r.jsx)(n.code,{children:"init"})," method (constructor), you can also call it from the child class using:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"parent.init()\n"})}),"\n",(0,r.jsx)(n.p,{children:"This is useful if the parent class performs some important setup that should not be skipped."}),"\n",(0,r.jsx)(n.h3,{id:"example-2",children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Vehicle\r\n    init()\r\n        show("Vehicle initialized")\r\n    end init\r\nend class\r\n\r\nclass Car inherit Vehicle\r\n    init()\r\n        show("Car setup begins")\r\n        parent.init()\r\n        show("Car initialized")\r\n    end init\r\nend class\r\n\r\nset c to new Car()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-2",children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"Car setup begins\r\nVehicle initialized\r\nCar initialized\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"overriding-methods",children:"Overriding Methods"}),"\n",(0,r.jsxs)(n.p,{children:["If a child class defines a method with the same name as the one in the parent class, it will ",(0,r.jsx)(n.strong,{children:"override"})," the parent version."]}),"\n",(0,r.jsx)(n.h3,{id:"example-3",children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Printer\r\n    method print()\r\n        show("Printing from Printer")\r\n    end method\r\nend class\r\n\r\nclass PDFPrinter inherit Printer\r\n    method print()\r\n        show("Printing from PDFPrinter")\r\n    end method\r\nend class\r\n\r\nset printer to new PDFPrinter()\r\nprinter.print()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-3",children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"Printing from PDFPrinter\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Even though ",(0,r.jsx)(n.code,{children:"PDFPrinter"})," inherits from ",(0,r.jsx)(n.code,{children:"Printer"}),", it replaces the ",(0,r.jsx)(n.code,{children:"print()"})," method with its own version."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"examples-with-output",children:"Examples with Output"}),"\n",(0,r.jsx)(n.h3,{id:"example-1-basic-inheritance",children:"Example 1: Basic Inheritance"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Person\r\n    method greet()\r\n        show("Hello!")\r\n    end method\r\nend class\r\n\r\nclass Student inherit Person\r\nend class\r\n\r\nset st to new Student()\r\nst.greet()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-4",children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"Hello!\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"example-2-adding-new-methods-in-child",children:"Example 2: Adding New Methods in Child"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Animal\r\n    method eat()\r\n        show("Eating food")\r\n    end method\r\nend class\r\n\r\nclass Cat inherit Animal\r\n    method meow()\r\n        show("Meow!")\r\n    end method\r\nend class\r\n\r\nset kitty to new Cat()\r\nkitty.eat()\r\nkitty.meow()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-5",children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"Eating food\r\nMeow!\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"example-3-overriding-and-using-parent",children:["Example 3: Overriding and Using ",(0,r.jsx)(n.code,{children:"parent"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Notification\r\n    method send()\r\n        show("Sending general notification")\r\n    end method\r\nend class\r\n\r\nclass EmailNotification inherit Notification\r\n    method send()\r\n        show("Sending email:")\r\n        parent.send()\r\n    end method\r\nend class\r\n\r\nset email to new EmailNotification()\r\nemail.send()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-6",children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"Sending email:\r\nSending general notification\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use inheritance when classes share common behaviors or properties."}),"\n",(0,r.jsx)(n.li,{children:"Avoid deep inheritance trees (more than 3 levels) to keep things simple."}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"parent.method()"})," or ",(0,r.jsx)(n.code,{children:"parent.init()"})," when you want to extend, not replace."]}),"\n",(0,r.jsx)(n.li,{children:"Avoid inheriting just for the sake of reusing code \u2014 prefer composition in such cases."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["Inheritance in EasyBite helps you write smarter, cleaner, and more organized code by reusing and extending behavior from parent classes. The ",(0,r.jsx)(n.code,{children:"inherit"})," keyword connects child classes with parents, while ",(0,r.jsx)(n.code,{children:"parent.method()"})," and ",(0,r.jsx)(n.code,{children:"parent.init()"})," allow access to the parent\u2019s logic when needed."]}),"\n",(0,r.jsx)(n.p,{children:"By mastering inheritance, you will write code that is not only easier to understand and maintain but also ready to scale as your projects grow."})]})}function o(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var s=i(6540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);