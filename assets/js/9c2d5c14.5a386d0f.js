"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[6754],{5583:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"oop/class-relationships","title":"Class Relationships","description":"Understanding Class Relationships in OOP (EasyBite)","source":"@site/docs/oop/class-relationships.md","sourceDirName":"oop","slug":"/oop/class-relationships","permalink":"/oop/class-relationships","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/oop/class-relationships.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Polymorphism","permalink":"/oop/polymorphism"},"next":{"title":"OOP Frequently Asked Questions (FAQ)","permalink":"/oop/oop-facts"}}');var r=s(4848),t=s(8453);const a={},o="Class Relationships",l={},d=[{value:"Understanding Class Relationships in OOP (EasyBite)",id:"understanding-class-relationships-in-oop-easybite",level:2},{value:"1. Inheritance \u2014 \u201cis-a\u201d Relationship",id:"1-inheritance--is-a-relationship",level:2},{value:"Example",id:"example",level:3},{value:"Output",id:"output",level:3},{value:"2. Composition \u2014 \u201chas-a\u201d Relationship",id:"2-composition--has-a-relationship",level:2},{value:"Example",id:"example-1",level:3},{value:"Output",id:"output-1",level:3},{value:"3. Aggregation \u2014 \u201chas-a\u201d (weaker than composition)",id:"3-aggregation--has-a-weaker-than-composition",level:2},{value:"Example",id:"example-2",level:3},{value:"Output",id:"output-2",level:3},{value:"4. Dependency \u2014 \u201cuses-a\u201d Relationship",id:"4-dependency--uses-a-relationship",level:2},{value:"Example",id:"example-3",level:3},{value:"Output",id:"output-3",level:3},{value:"5. Visual Summary of Class Relationships",id:"5-visual-summary-of-class-relationships",level:2},{value:"Summary Table",id:"summary-table",level:2},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"class-relationships",children:"Class Relationships"})}),"\n",(0,r.jsx)(n.h2,{id:"understanding-class-relationships-in-oop-easybite",children:"Understanding Class Relationships in OOP (EasyBite)"}),"\n",(0,r.jsx)(n.p,{children:"In Object-Oriented Programming (OOP), classes do not exist in isolation. They often interact or relate to other classes in meaningful ways. Understanding these relationships helps you design clean, efficient, and modular software."}),"\n",(0,r.jsxs)(n.p,{children:["This page gives you a complete overview of the common types of class relationships with clear examples in ",(0,r.jsx)(n.strong,{children:"EasyBite"})," syntax."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-inheritance--is-a-relationship",children:"1. Inheritance \u2014 \u201cis-a\u201d Relationship"}),"\n",(0,r.jsxs)(n.p,{children:["Inheritance is when one class ",(0,r.jsx)(n.strong,{children:"inherits"}),' properties and behaviors from another class. This is described as an "is-a" relationship. For example, a ',(0,r.jsx)(n.code,{children:"Dog"})," ",(0,r.jsx)(n.strong,{children:"is a"})," ",(0,r.jsx)(n.code,{children:"Animal"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Animal\r\n    method speak()\r\n        show "Animal speaks"\r\n    end method\r\nend class\r\n\r\nclass Dog inherit Animal\r\n    method bark()\r\n        show "Woof!"\r\n    end method\r\nend class\r\n\r\nset d to new Dog()\r\nd.speak()\r\nd.bark()\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," That calling ",(0,r.jsx)(n.code,{children:"set d to new Dog()"})," is like given birth to a new Dog i.e each time we use new keyword is like you are telling the animal to give birth to a new Dog."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Animal speaks\r\nWoof!\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Dog"})," class ",(0,r.jsx)(n.strong,{children:"inherits"})," from ",(0,r.jsx)(n.code,{children:"Animal"}),", meaning it gets the ",(0,r.jsx)(n.code,{children:"speak"})," method for free."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-composition--has-a-relationship",children:"2. Composition \u2014 \u201chas-a\u201d Relationship"}),"\n",(0,r.jsxs)(n.p,{children:['Composition means that a class contains another class as a part of it. This is a "has-a" relationship. For example, a ',(0,r.jsx)(n.code,{children:"Car"})," has a ",(0,r.jsx)(n.code,{children:"Engine"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Engine\r\n    method start()\r\n        show "Engine started"\r\n    end method\r\nend class\r\n\r\nclass Car\r\n    declare engine\r\n    init()\r\n        this.engine to new Engine()\r\n    end init\r\n\r\n    method run()\r\n        engine.start()\r\n    end method\r\nend class\r\n\r\nset c to new Car()\r\nc.run()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-1",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Engine started\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Car"})," class ",(0,r.jsx)(n.strong,{children:"has-a"})," ",(0,r.jsx)(n.code,{children:"Engine"}),". This is ",(0,r.jsx)(n.strong,{children:"composition"})," \u2014 the car is composed of an engine and other parts."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-aggregation--has-a-weaker-than-composition",children:"3. Aggregation \u2014 \u201chas-a\u201d (weaker than composition)"}),"\n",(0,r.jsx)(n.p,{children:'Aggregation is similar to composition, but the object being used is created outside and passed in. It still shows a "has-a" relationship but is more flexible and less tightly coupled.'}),"\n",(0,r.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Department\r\n    method showname()\r\n        show "Computer Science"\r\n    end method\r\nend class\r\n\r\nclass University\r\n    declare dept\r\n    init(dept)\r\n        this.dept to dept\r\n    end init\r\n\r\n    method display()\r\n        dept.showname()\r\n    end method\r\nend class\r\n\r\nset dpt to new Department()\r\nset uni to new University(dpt)\r\nuni.display()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-2",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Computer Science\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.strong,{children:"aggregation"}),", the ",(0,r.jsx)(n.code,{children:"Department"})," is passed into the ",(0,r.jsx)(n.code,{children:"University"}),", showing a ",(0,r.jsx)(n.strong,{children:"weaker"})," ownership than composition."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-dependency--uses-a-relationship",children:"4. Dependency \u2014 \u201cuses-a\u201d Relationship"}),"\n",(0,r.jsxs)(n.p,{children:["A class ",(0,r.jsx)(n.strong,{children:"depends"}),' on another if it uses it temporarily inside one of its methods. This is a "uses-a" relationship. It\'s the weakest form of connection.']}),"\n",(0,r.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Printer\r\n    method printdata(data)\r\n        show "Printing: " + data\r\n    end method\r\nend class\r\n\r\nclass Report\r\n    method generate()\r\n        set p to new Printer()\r\n        p.printdata("Report content")\r\n    end method\r\nend class\r\n\r\nset r to new Report()\r\nr.generate()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"output-3",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Printing: Report content\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here, ",(0,r.jsx)(n.code,{children:"Report"})," ",(0,r.jsx)(n.strong,{children:"uses"})," ",(0,r.jsx)(n.code,{children:"Printer"}),", but only within the ",(0,r.jsx)(n.code,{children:"generate"})," method. That\u2019s a ",(0,r.jsx)(n.strong,{children:"dependency"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"5-visual-summary-of-class-relationships",children:"5. Visual Summary of Class Relationships"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"+-------------------+\r\n|      Animal       |\r\n+-------------------+\r\n         \u25b2\r\n         | is-a (inheritance)\r\n+-------------------+\r\n|       Dog         |\r\n+-------------------+\r\n\r\n\r\n+-------------------+          +-------------------+\r\n|       Car         | has-a \u2192 |      Engine       |\r\n+-------------------+          +-------------------+\r\n\r\n\r\n+-------------------+          +-------------------+\r\n|    University     | has-a \u2192 |   Department      |\r\n+-------------------+          +-------------------+\r\n   (aggregation)\r\n\r\n\r\n+-------------------+ uses-a \u2192 +-------------------+\r\n|     Report        |         |     Printer       |\r\n+-------------------+         +-------------------+\r\n  (dependency)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary-table",children:"Summary Table"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Relationship"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"EasyBite Feature"}),(0,r.jsx)(n.th,{children:"Ownership Strength"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"is-a"}),(0,r.jsx)(n.td,{children:"Inheritance"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"inherit"})}),(0,r.jsx)(n.td,{children:"Strong"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"has-a"}),(0,r.jsx)(n.td,{children:"Composition"}),(0,r.jsx)(n.td,{children:"Member object (created in class)"}),(0,r.jsx)(n.td,{children:"Strong"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"has-a"}),(0,r.jsx)(n.td,{children:"Aggregation"}),(0,r.jsx)(n.td,{children:"Member passed to constructor"}),(0,r.jsx)(n.td,{children:"Medium"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"uses-a"}),(0,r.jsx)(n.td,{children:"Dependency"}),(0,r.jsx)(n.td,{children:"Used temporarily in method"}),(0,r.jsx)(n.td,{children:"Weak"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Understanding class relationships is essential for designing well-structured and maintainable programs. EasyBite gives you the tools to represent these relationships clearly:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"inherit"})," for is-a relationships (inheritance)."]}),"\n",(0,r.jsxs)(n.li,{children:["Use attributes and ",(0,r.jsx)(n.code,{children:"init"})," for composition and aggregation."]}),"\n",(0,r.jsx)(n.li,{children:"Use temporary objects inside methods for dependencies."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This foundation helps you structure larger programs that are easier to update, test, and reuse."})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);