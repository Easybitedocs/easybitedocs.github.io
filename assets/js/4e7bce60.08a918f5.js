"use strict";(self.webpackChunkeasybitedocs=self.webpackChunkeasybitedocs||[]).push([[9775],{4488:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"functions/function-concept","title":"Functions","description":"Functions are a fundamental building block in programming, and in EasyBite, they are designed to be simple, intuitive, and perfect for beginners. They allow you to organize your code into smaller, reusable pieces that can be called and executed multiple times with different inputs. This makes your programs easier to write, read, and maintain. Whether you\'re performing a simple calculation or a more complex task, functions help you encapsulate a set of operations into a named block of code that you can use whenever you need it.","source":"@site/docs/functions/function-concept.md","sourceDirName":"functions","slug":"/functions/function-concept","permalink":"/functions/function-concept","draft":false,"unlisted":false,"editUrl":"https://github.com/Easybitedocs/easybitedocs.github.io/tree/main/docs/functions/function-concept.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Modules","permalink":"/syntax/modules"},"next":{"title":"Default Arguments","permalink":"/functions/default-arguments"}}');var t=i(4848),r=i(8453);const l={},o="Functions",a={},c=[{value:"What is a Function?",id:"what-is-a-function",level:2},{value:"Defining a Function in EasyBite",id:"defining-a-function-in-easybite",level:2},{value:"Calling a Function",id:"calling-a-function",level:2},{value:"Parameters and Return Values",id:"parameters-and-return-values",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return Values",id:"return-values",level:3},{value:"A Practical Example: Greeting People",id:"a-practical-example-greeting-people",level:2},{value:"Recursion in EasyBite",id:"recursion-in-easybite",level:2},{value:"Example: Calculating Factorial with a Loop",id:"example-calculating-factorial-with-a-loop",level:2},{value:"How This Works",id:"how-this-works",level:3},{value:"Tips for Writing Your Own Functions",id:"tips-for-writing-your-own-functions",level:2},{value:"Wrapping Up",id:"wrapping-up",level:2},{value:"Why Functions Matter",id:"why-functions-matter",level:2},{value:"Putting It All Together",id:"putting-it-all-together",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"functions",children:"Functions"})}),"\n",(0,t.jsx)(n.p,{children:"Functions are a fundamental building block in programming, and in EasyBite, they are designed to be simple, intuitive, and perfect for beginners. They allow you to organize your code into smaller, reusable pieces that can be called and executed multiple times with different inputs. This makes your programs easier to write, read, and maintain. Whether you're performing a simple calculation or a more complex task, functions help you encapsulate a set of operations into a named block of code that you can use whenever you need it."}),"\n",(0,t.jsx)(n.p,{children:"In this detailed explanation, we'll explore what functions are, why they\u2019re useful, how to define and use them in EasyBite, and how to work within the language\u2019s capabilities\u2014now including full recursion support. By the end, you\u2019ll have a clear understanding of functions and be ready to start using them in your own programs!"}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-function",children:"What is a Function?"}),"\n",(0,t.jsx)(n.p,{children:'Imagine a function as a small machine or a recipe. A recipe has a name (like "chocolate cake"), a list of ingredients (such as flour and sugar), and a set of instructions (mix, bake, and serve). When you want to make the cake, you gather the ingredients and follow the steps. A function works the same way: it has a name, a list of parameters (the "ingredients" it needs), and a block of code (the instructions). When you want to use the function, you "call" it by its name and provide the necessary inputs.'}),"\n",(0,t.jsx)(n.p,{children:"Functions are incredibly useful because they let you:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reuse code"}),": Write a set of instructions once and use it over and over with different inputs, saving you time and effort."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Make code readable"}),": Give your function a clear name (like ",(0,t.jsx)(n.code,{children:"multiply"})," or ",(0,t.jsx)(n.code,{children:"greet"}),") so anyone reading your code can understand what it does without digging into the details."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simplify debugging"}),": If something goes wrong, you can focus on fixing just the function instead of searching through your entire program."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keep things organized"}),": Break your program into smaller, manageable pieces that each handle a specific task."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In EasyBite, functions are especially beginner-friendly because the syntax is straightforward, and the language focuses on simplicity."}),"\n",(0,t.jsx)(n.h2,{id:"defining-a-function-in-easybite",children:"Defining a Function in EasyBite"}),"\n",(0,t.jsxs)(n.p,{children:["To create a function in EasyBite, you use the ",(0,t.jsx)(n.code,{children:"function"})," keyword, followed by the name you choose for your function. After the name, you add a pair of parentheses ",(0,t.jsx)(n.code,{children:"()"})," that hold the parameters\u2014the inputs your function will work with. If there\u2019s more than one parameter, you separate them with commas. Then, you write the code that the function will execute inside its block, and you finish it with ",(0,t.jsx)(n.code,{children:"end function"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s the basic structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function functionName(parameter1, parameter2, ...)\r\n    // code to be executed\r\nend function\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let\u2019s look at a simple example: a function that multiplies two numbers."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function multiply(a, b)\r\n    return a * b\r\nend function\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s what each part means:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"function multiply(a, b)"}),": This defines a function named ",(0,t.jsx)(n.code,{children:"multiply"})," that takes two parameters, ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"}),". These are the numbers it will multiply."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"return a * b"}),": This is the instruction inside the function. It multiplies ",(0,t.jsx)(n.code,{children:"a"})," by ",(0,t.jsx)(n.code,{children:"b"})," and sends the result back to wherever the function was called."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"end function"}),": This marks the end of the function definition."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Think of ",(0,t.jsx)(n.code,{children:"multiply"})," as a little calculator: you give it two numbers, and it hands you back their product."]}),"\n",(0,t.jsx)(n.h2,{id:"calling-a-function",children:"Calling a Function"}),"\n",(0,t.jsx)(n.p,{children:'Once you\u2019ve defined a function, you can use it\u2014or "call" it\u2014by writing its name followed by the inputs (called "arguments") in parentheses. You can also store the result in a variable if the function returns something.'}),"\n",(0,t.jsxs)(n.p,{children:["For example, using the ",(0,t.jsx)(n.code,{children:"multiply"})," function:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"set result to multiply(5, 3)\r\nshow result  // This will display 15\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s what happens:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"multiply(5, 3)"})," calls the multiply function, passing 5 as ",(0,t.jsx)(n.code,{children:"a"})," and 3 as ",(0,t.jsx)(n.code,{children:"b"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"The function multiplies 5 by 3, returning 15."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"set result to"})," stores that 15 in the variable ",(0,t.jsx)(n.code,{children:"result"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"show result"})," displays 15 on the screen."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You can call the same function with different numbers\u2014like ",(0,t.jsx)(n.code,{children:"multiply(10, 2)"})," or ",(0,t.jsx)(n.code,{children:"multiply(4, 6)"}),"\u2014and it will work just as well, showing how reusable functions are!"]}),"\n",(0,t.jsx)(n.h2,{id:"parameters-and-return-values",children:"Parameters and Return Values"}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s dive a bit deeper into two key parts of functions: ",(0,t.jsx)(n.strong,{children:"parameters"})," and ",(0,t.jsx)(n.strong,{children:"return values"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:["Parameters are like placeholders for the inputs your function needs. In the ",(0,t.jsx)(n.code,{children:"multiply"})," example, ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"})," are parameters. When you call the function with ",(0,t.jsx)(n.code,{children:"multiply(5, 3)"}),", the value 5 gets assigned to ",(0,t.jsx)(n.code,{children:"a"}),", and 3 gets assigned to ",(0,t.jsx)(n.code,{children:"b"}),". Parameters let your function work with different data each time it\u2019s called, making it flexible."]}),"\n",(0,t.jsx)(n.h3,{id:"return-values",children:"Return Values"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"return"})," statement is how a function sends a result back to the code that called it. In ",(0,t.jsx)(n.code,{children:"multiply"}),", ",(0,t.jsx)(n.code,{children:"return a * b"})," calculates the product and returns it. You can then use that returned value\u2014like storing it in a variable or displaying it. If a function doesn\u2019t have a return statement, it can still do things (like show a message), but it won\u2019t give you a value to work with afterward."]}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s an example without a return value:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function sayHello(name)\r\n    show "Hello, " + name\r\nend function\r\n\r\nsayHello("Emma")  // Displays: Hello, Emma\n'})}),"\n",(0,t.jsx)(n.p,{children:"This function just displays a greeting and doesn\u2019t return anything\u2014it\u2019s useful for its action, not for producing a value."}),"\n",(0,t.jsx)(n.h2,{id:"a-practical-example-greeting-people",children:"A Practical Example: Greeting People"}),"\n",(0,t.jsx)(n.p,{children:"To see how functions shine with reusability, let\u2019s create a function that greets someone by name:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function greet(name)\r\n    show "Hello, " + name + "!"\r\nend function\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now, you can use it multiple times with different names:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'greet("Alice")  // Displays: Hello, Alice!\r\ngreet("Bob")    // Displays: Hello, Bob!\r\ngreet("Maya")   // Displays: Hello, Maya!\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Instead of writing ",(0,t.jsx)(n.code,{children:'show "Hello, Alice!"'}),", ",(0,t.jsx)(n.code,{children:'show "Hello, Bob!"'}),', and so on, you write the greeting logic once in the function and reuse it. This keeps your code short and easy to update\u2014if you want to change the greeting to "Hi" instead of "Hello," you only edit one place!']}),"\n",(0,t.jsx)(n.h2,{id:"recursion-in-easybite",children:"Recursion in EasyBite"}),"\n",(0,t.jsxs)(n.p,{children:["With the latest update, EasyBite now fully supports ",(0,t.jsx)(n.strong,{children:"recursion"}),", allowing functions to call themselves to solve problems naturally. Recursion can simplify solutions to tasks like traversing nested structures or performing divide-and-conquer algorithms."]}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s a recursive version of the factorial function:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function factorial(n)\r\n    if n <= 1 then\r\n        return 1\r\n    else\r\n        return n * factorial(n - 1)\r\n    end if\r\nend function\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"factorial(n)"})," checks if ",(0,t.jsx)(n.code,{children:"n"})," is 1 or less; if so, it returns 1."]}),"\n",(0,t.jsxs)(n.li,{children:["Otherwise, it returns ",(0,t.jsx)(n.code,{children:"n * factorial(n - 1)"}),", calling itself with a smaller value until the base case is reached."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You can call it like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'set result to factorial(5)\r\nshow "The factorial of 5 is: " + result  // Displays: The factorial of 5 is: 120\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can still use loops for iterative solutions when you prefer, but now you have recursion as a powerful tool in your EasyBite toolbox."}),"\n",(0,t.jsx)(n.h2,{id:"example-calculating-factorial-with-a-loop",children:"Example: Calculating Factorial with a Loop"}),"\n",(0,t.jsxs)(n.p,{children:["A classic problem in programming is calculating the ",(0,t.jsx)(n.strong,{children:"factorial"})," of a number. The factorial of a number ",(0,t.jsx)(n.code,{children:"n"})," (written as ",(0,t.jsx)(n.code,{children:"n!"}),") is the product of all positive integers from 1 up to ",(0,t.jsx)(n.code,{children:"n"}),". For instance:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"5! = 5 \xd7 4 \xd7 3 \xd7 2 \xd7 1 = 120"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"3! = 3 \xd7 2 \xd7 1 = 6"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s the iterative version using a loop:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"function factorialIterative(n)\r\n    declare result\r\n    set result to 1\r\n    repeat while(n > 0)\r\n        set result to result * n\r\n        set n to n - 1\r\n    end repeat\r\n    return result\r\nend function\n"})}),"\n",(0,t.jsx)(n.p,{children:"And calling it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'set number to 5\r\nset factorialResult to factorialIterative(number)\r\nshow "The factorial of " + number + " is: " + factorialResult\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This displays: ",(0,t.jsx)(n.strong,{children:'"The factorial of 5 is: 120"'})]}),"\n",(0,t.jsx)(n.h3,{id:"how-this-works",children:"How This Works"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Setup"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"declare result"})," creates a variable to hold our answer."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"set result to 1"})," starts it at 1 (since multiplying by 1 doesn\u2019t change anything)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Loop"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"repeat while(n > 0)"})," keeps going as long as ",(0,t.jsx)(n.code,{children:"n"})," is greater than 0."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"set result to result * n"})," multiplies the current ",(0,t.jsx)(n.code,{children:"result"})," by ",(0,t.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"set n to n - 1"})," reduces ",(0,t.jsx)(n.code,{children:"n"})," by 1 each time."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Step-by-Step"})," (with ",(0,t.jsx)(n.code,{children:"n = 5"}),"):"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Start: ",(0,t.jsx)(n.code,{children:"result = 1"}),", ",(0,t.jsx)(n.code,{children:"n = 5"})]}),"\n",(0,t.jsxs)(n.li,{children:["Loop 1: ",(0,t.jsx)(n.code,{children:"result = 1 * 5 = 5"}),", ",(0,t.jsx)(n.code,{children:"n = 4"})]}),"\n",(0,t.jsxs)(n.li,{children:["Loop 2: ",(0,t.jsx)(n.code,{children:"result = 5 * 4 = 20"}),", ",(0,t.jsx)(n.code,{children:"n = 3"})]}),"\n",(0,t.jsxs)(n.li,{children:["Loop 3: ",(0,t.jsx)(n.code,{children:"result = 20 * 3 = 60"}),", ",(0,t.jsx)(n.code,{children:"n = 2"})]}),"\n",(0,t.jsxs)(n.li,{children:["Loop 4: ",(0,t.jsx)(n.code,{children:"result = 60 * 2 = 120"}),", ",(0,t.jsx)(n.code,{children:"n = 1"})]}),"\n",(0,t.jsxs)(n.li,{children:["Loop 5: ",(0,t.jsx)(n.code,{children:"result = 120 * 1 = 120"}),", ",(0,t.jsx)(n.code,{children:"n = 0"})]}),"\n",(0,t.jsxs)(n.li,{children:["Stop: ",(0,t.jsx)(n.code,{children:"n"})," is 0, so the loop ends."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"return result"})," gives back ",(0,t.jsx)(n.code,{children:"120"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'show "The factorial of " + number + " is: " + factorialResult'})," prints: ",(0,t.jsx)(n.code,{children:"The factorial of 5 is: 120"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This loop does the same job recursion might do in other languages, but it\u2019s simpler and fits EasyBite\u2019s beginner-friendly style."}),"\n",(0,t.jsx)(n.h2,{id:"tips-for-writing-your-own-functions",children:"Tips for Writing Your Own Functions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pick Clear Names"}),": Use names like ",(0,t.jsx)(n.code,{children:"add"})," or ",(0,t.jsx)(n.code,{children:"printMessage"})," so you know what the function does just by reading it."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Start Small"}),": Try simple functions first, like one that adds two numbers or says \u201cHello\u201d."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test It"}),": Run your function with different inputs to make sure it works."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Here\u2019s a fun exercise to try:\r\nWrite a function called ",(0,t.jsx)(n.code,{children:"sayHello"})," that takes a name and shows a greeting. For example, ",(0,t.jsx)(n.code,{children:'sayHello("Alex")'})," should show ",(0,t.jsx)(n.code,{children:"Hello, Alex!"}),". Give it a shot!"]}),"\n",(0,t.jsx)(n.h2,{id:"wrapping-up",children:"Wrapping Up"}),"\n",(0,t.jsx)(n.p,{children:"Functions in EasyBite are your tools to make coding fun and efficient. They let you reuse code, keep things tidy, and solve problems step by step. While EasyBite skips recursion to keep things simple, loops give you all the power you need to repeat tasks. Practice writing functions, experiment with them, and soon you\u2019ll be building amazing programs with ease!"}),"\n",(0,t.jsx)(n.h2,{id:"why-functions-matter",children:"Why Functions Matter"}),"\n",(0,t.jsx)(n.p,{children:"Functions are like tools in a toolbox: once you have them, you can build all sorts of things more easily. In EasyBite, they let you:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Write code once and use it many times."}),"\n",(0,t.jsx)(n.li,{children:"Keep your programs neat and organized."}),"\n",(0,t.jsx)(n.li,{children:'Focus on what your code does (like "multiply numbers" or "calculate factorial") rather than how it does it every time.'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"With recursion now supported, you can tackle both simple and complex problems in the style that fits you best\u2014iterative or recursive."}),"\n",(0,t.jsx)(n.h2,{id:"putting-it-all-together",children:"Putting It All Together"}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s recap with one more example to tie everything together. Suppose you want a function to calculate the area of a rectangle (",(0,t.jsx)(n.code,{children:"length \xd7 width"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'function rectangleArea(length, width)\r\n    return length * width\r\nend function\r\n\r\nset area to rectangleArea(4, 6)\r\nshow "The area is: " + area  // Displays: The area is: 24\n'})}),"\n",(0,t.jsx)(n.p,{children:"This function:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Takes two parameters: ",(0,t.jsx)(n.code,{children:"length"})," and ",(0,t.jsx)(n.code,{children:"width"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Returns their product."}),"\n",(0,t.jsxs)(n.li,{children:["Can be reused for any rectangle\u2014like ",(0,t.jsx)(n.code,{children:"rectangleArea(10, 3)"})," for an area of 30."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"It\u2019s simple, reusable, and clear\u2014just what EasyBite aims for."}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["Functions in EasyBite are a fantastic way to start exploring programming. They let you bundle up instructions into named blocks that you can use whenever you need them, making your code cleaner and more efficient. With a simple syntax\u2014",(0,t.jsx)(n.code,{children:"function"}),", parameters, code, and ",(0,t.jsx)(n.code,{children:"end function"}),"\u2014you can define them easily. By calling them with different inputs, you unlock their power to adapt and reuse."]}),"\n",(0,t.jsx)(n.p,{children:"With full recursion support now available alongside loops, you have even more flexibility to write clear and elegant solutions. As you learn, try writing your own functions\u2014maybe one to add numbers, display a pattern, or calculate something fun. The more you practice, the more you\u2019ll see how functions can simplify your coding adventures in EasyBite."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);